// DXTaskbar7.idl : IDL source for DXTaskbar7
//

// This file will be processed by the MIDL tool to
// produce the type library (DXTaskbar7.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(C275096B-65C8-44ed-B7CE-4EC199B48506),
	dual,
	nonextensible,
	helpstring("ITaskbar7 Interface"),
	pointer_default(unique)
]
interface ITaskbar7 : IDispatch{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	[propget, id(1), helpstring("Get the handle for this tab")] HRESULT TabHwnd([out, retval] LONG* objectName);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Methods
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Tab management
	
	[id(2), helpstring("Set a global icon for all the tabs")] HRESULT SetTabsIcon([in] BSTR icon);
	[helpstring("Setup the tab name and position")] HRESULT ConfigureTab([in] BSTR name, [in] LONG after);
	[helpstring("Set the tab as active and show it in the tab list")] HRESULT SetTabActive();
	[helpstring("Remove the tab from the list")] HRESULT RemoveTab();

	// ThumbBar
	[helpstring("Setup a new tab button")] HRESULT SetupButton([in] int id, [in] BSTR image, [in] BSTR tooltip, [in] int flags);	
	[helpstring("Update an existing tab button")] HRESULT UpdateButton([in] int id,[in] BSTR image, [in] BSTR tooltip, [in] int flags);	
	[helpstring("Add all defined buttons (will only be able to update the existing ones afterwards)")] HRESULT AddButtons();

	// Overlay
	[helpstring("Applies an overlay to a taskbar button to indicate application status or a notification to the user.")] HRESULT SetOverlayIcon([in] BSTR path, [in] BSTR description);

	// Progress
	[helpstring("Sets the type and state of the progress indicator displayed on a taskbar button.")] HRESULT SetProgressState([in] int flag);
	[helpstring("Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.")] HRESULT SetProgressValue([in] ULONGLONG completed, [in] ULONGLONG total);

	// Tasks and destinations
	[helpstring("Specifies a unique Application User Model ID (AppID)")] HRESULT SetAppID([in] BSTR appID);	
	[helpstring("Remove all destinations from the destinations jump list")] HRESULT RemoveAllDestinations();
		
	[helpstring("Declares that the Jump List initiated by a call to BeginList is complete and ready for display")] HRESULT CommitList();
	[helpstring("Discontinues a Jump List building session initiated by BeginList  without committing any changes")] HRESULT AbortList();
	[helpstring("Deletes a custom Jump List for a specified application.")] HRESULT DeleteList([in] BSTR appID);
	[helpstring("Add a new user tasks (typically static links)")] HRESULT AddUserTask([in] BSTR name, [in] BSTR path, [in] BSTR arguments, [in] BSTR icon, [in] int iconIndex, [in] BSTR workingFolder);
	[helpstring("Add a new destination in the selected category")] HRESULT AddDestination([in] BSTR category, [in] BSTR name, [in] BSTR path, [in] BSTR arguments, [in] BSTR icon, [in] int iconIndex, [in] BSTR workingFolder);	
	[helpstring("Add a separator (use category Tasks to add to the user tasks)")] HRESULT AddSeparator([in] BSTR category);	
	[helpstring("Add a known category")] HRESULT AppendKnownCategory([in] int knownDestCategory);	
};

[
	uuid(8C650B9D-E2A4-4980-9CED-3A38D91F022B),
	version(1.0),
	helpstring("DXTaskbar7 1.0 Type Library")
]
library DXTaskbar7Lib
{
	importlib("stdole2.tlb");
	[
		uuid(20BD78A3-CDA1-47f9-A505-93D1990252C9),
		helpstring("Taskbar7 Class")
	]
	coclass Taskbar7
	{
		[default] interface ITaskbar7;
		interface ISupportErrorInfo;
	};
};
