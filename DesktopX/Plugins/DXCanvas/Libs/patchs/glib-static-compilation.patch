commit 153460a9df9dea38eed0f0c222171a72edc7e7a8
Author: unknown <Julien@.(none)>
Date:   Thu Jun 4 11:11:42 2009 -0400

    Patch for static compilation into stdcall dll

diff --git a/build/win32/dirent/dirent.h b/build/win32/dirent/dirent.h
index 237665b..8922389 100644
--- a/build/win32/dirent/dirent.h
+++ b/build/win32/dirent/dirent.h
@@ -1,127 +1,127 @@
-/*
- * DIRENT.H (formerly DIRLIB.H)
- * This file has no copyright assigned and is placed in the Public Domain.
- * This file is a part of the mingw-runtime package.
- * No warranty is given; refer to the file DISCLAIMER within the package.
- *
- */
-#ifndef _DIRENT_H_
-#define _DIRENT_H_
-
-#include <stdio.h>
-#include <io.h>
-
-#ifndef RC_INVOKED
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-struct dirent
-{
-	long		d_ino;		/* Always zero. */
-	unsigned short	d_reclen;	/* Always zero. */
-	unsigned short	d_namlen;	/* Length of name in d_name. */
-	char		d_name[FILENAME_MAX]; /* File name. */
-};
-
-#ifdef _WIN64
-#define INTPTR __int64
-#else
-#define INTPTR long
-#endif
-
-/*
- * This is an internal data structure. Good programmers will not use it
- * except as an argument to one of the functions below.
- * dd_stat field is now int (was short in older versions).
- */
-typedef struct
-{
-	/* disk transfer area for this dir */
-	struct _finddata_t	dd_dta;
-
-	/* dirent struct to return from dir (NOTE: this makes this thread
-	 * safe as long as only one thread uses a particular DIR struct at
-	 * a time) */
-	struct dirent		dd_dir;
-
-	/* _findnext handle */
-	INTPTR			dd_handle;
-
-	/*
-         * Status of search:
-	 *   0 = not started yet (next entry to read is first entry)
-	 *  -1 = off the end
-	 *   positive = 0 based index of next entry
-	 */
-	int			dd_stat;
-
-	/* given path for dir with search pattern (struct is extended) */
-	char			dd_name[1];
-} DIR;
-
-DIR* __cdecl opendir (const char*);
-struct dirent* __cdecl readdir (DIR*);
-int __cdecl closedir (DIR*);
-void __cdecl rewinddir (DIR*);
-long __cdecl telldir (DIR*);
-void __cdecl seekdir (DIR*, long);
-
-
-/* wide char versions */
-
-struct _wdirent
-{
-	long		d_ino;		/* Always zero. */
-	unsigned short	d_reclen;	/* Always zero. */
-	unsigned short	d_namlen;	/* Length of name in d_name. */
-	wchar_t		d_name[FILENAME_MAX]; /* File name. */
-};
-
-/*
- * This is an internal data structure. Good programmers will not use it
- * except as an argument to one of the functions below.
- */
-typedef struct
-{
-	/* disk transfer area for this dir */
-	struct _wfinddata_t	dd_dta;
-
-	/* dirent struct to return from dir (NOTE: this makes this thread
-	 * safe as long as only one thread uses a particular DIR struct at
-	 * a time) */
-	struct _wdirent		dd_dir;
-
-	/* _findnext handle */
-	INTPTR			dd_handle;
-
-	/*
-         * Status of search:
-	 *   0 = not started yet (next entry to read is first entry)
-	 *  -1 = off the end
-	 *   positive = 0 based index of next entry
-	 */
-	int			dd_stat;
-
-	/* given path for dir with search pattern (struct is extended) */
-	wchar_t			dd_name[1];
-} _WDIR;
-
-
-
-_WDIR* __cdecl _wopendir (const wchar_t*);
-struct _wdirent*  __cdecl _wreaddir (_WDIR*);
-int __cdecl _wclosedir (_WDIR*);
-void __cdecl _wrewinddir (_WDIR*);
-long __cdecl _wtelldir (_WDIR*);
-void __cdecl _wseekdir (_WDIR*, long);
-
-
-#ifdef	__cplusplus
-}
-#endif
-
-#endif	/* Not RC_INVOKED */
-
-#endif	/* Not _DIRENT_H_ */
+/*
+ * DIRENT.H (formerly DIRLIB.H)
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is a part of the mingw-runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within the package.
+ *
+ */
+#ifndef _DIRENT_H_
+#define _DIRENT_H_
+
+#include <stdio.h>
+#include <io.h>
+
+#ifndef RC_INVOKED
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct dirent
+{
+	long		d_ino;		/* Always zero. */
+	unsigned short	d_reclen;	/* Always zero. */
+	unsigned short	d_namlen;	/* Length of name in d_name. */
+	char		d_name[FILENAME_MAX]; /* File name. */
+};
+
+#ifdef _WIN64
+#define INTPTR __int64
+#else
+#define INTPTR long
+#endif
+
+/*
+ * This is an internal data structure. Good programmers will not use it
+ * except as an argument to one of the functions below.
+ * dd_stat field is now int (was short in older versions).
+ */
+typedef struct
+{
+	/* disk transfer area for this dir */
+	struct _finddata_t	dd_dta;
+
+	/* dirent struct to return from dir (NOTE: this makes this thread
+	 * safe as long as only one thread uses a particular DIR struct at
+	 * a time) */
+	struct dirent		dd_dir;
+
+	/* _findnext handle */
+	INTPTR			dd_handle;
+
+	/*
+         * Status of search:
+	 *   0 = not started yet (next entry to read is first entry)
+	 *  -1 = off the end
+	 *   positive = 0 based index of next entry
+	 */
+	int			dd_stat;
+
+	/* given path for dir with search pattern (struct is extended) */
+	char			dd_name[1];
+} DIR;
+
+DIR* __cdecl opendir (const char*);
+struct dirent* __cdecl readdir (DIR*);
+int __cdecl closedir (DIR*);
+void __cdecl rewinddir (DIR*);
+long __cdecl telldir (DIR*);
+void __cdecl seekdir (DIR*, long);
+
+
+/* wide char versions */
+
+struct _wdirent
+{
+	long		d_ino;		/* Always zero. */
+	unsigned short	d_reclen;	/* Always zero. */
+	unsigned short	d_namlen;	/* Length of name in d_name. */
+	wchar_t		d_name[FILENAME_MAX]; /* File name. */
+};
+
+/*
+ * This is an internal data structure. Good programmers will not use it
+ * except as an argument to one of the functions below.
+ */
+typedef struct
+{
+	/* disk transfer area for this dir */
+	struct _wfinddata_t	dd_dta;
+
+	/* dirent struct to return from dir (NOTE: this makes this thread
+	 * safe as long as only one thread uses a particular DIR struct at
+	 * a time) */
+	struct _wdirent		dd_dir;
+
+	/* _findnext handle */
+	INTPTR			dd_handle;
+
+	/*
+         * Status of search:
+	 *   0 = not started yet (next entry to read is first entry)
+	 *  -1 = off the end
+	 *   positive = 0 based index of next entry
+	 */
+	int			dd_stat;
+
+	/* given path for dir with search pattern (struct is extended) */
+	wchar_t			dd_name[1];
+} _WDIR;
+
+
+
+_WDIR* _wopendir (const wchar_t*);
+struct _wdirent*  _wreaddir (_WDIR*);
+int _wclosedir (_WDIR*);
+void _wrewinddir (_WDIR*);
+long _wtelldir (_WDIR*);
+void _wseekdir (_WDIR*, long);
+
+
+#ifdef	__cplusplus
+}
+#endif
+
+#endif	/* Not RC_INVOKED */
+
+#endif	/* Not _DIRENT_H_ */
diff --git a/gio/giomodule.c b/gio/giomodule.c
index 68f3b7b..4b8f43a 100644
--- a/gio/giomodule.c
+++ b/gio/giomodule.c
@@ -557,7 +557,7 @@ g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
   return NULL;
 }
 
-static gint
+static gint _cdecl
 extension_prio_compare (gconstpointer  a,
 			gconstpointer  b)
 {
diff --git a/gio/gioscheduler.c b/gio/gioscheduler.c
index 14b59fe..f70b8ab 100644
--- a/gio/gioscheduler.c
+++ b/gio/gioscheduler.c
@@ -75,7 +75,7 @@ g_io_job_free (GIOSchedulerJob *job)
   g_free (job);
 }
 
-static gint
+static gint _cdecl
 g_io_job_compare (gconstpointer a,
 		  gconstpointer b,
 		  gpointer      user_data)
diff --git a/glib/garray.c b/glib/garray.c
index b05ded6..7244b9d 100644
--- a/glib/garray.c
+++ b/glib/garray.c
@@ -282,7 +282,7 @@ g_array_remove_range (GArray *farray,
   return farray;
 }
 
-void
+void _cdecl
 g_array_sort (GArray       *farray,
 	      GCompareFunc  compare_func)
 {
diff --git a/glib/garray.h b/glib/garray.h
index db00137..c8ec3bc 100644
--- a/glib/garray.h
+++ b/glib/garray.h
@@ -95,7 +95,7 @@ GArray* g_array_remove_index_fast (GArray           *array,
 GArray* g_array_remove_range      (GArray           *array,
 				   guint             index_,
 				   guint             length);
-void    g_array_sort              (GArray           *array,
+void    _cdecl g_array_sort              (GArray           *array,
 				   GCompareFunc      compare_func);
 void    g_array_sort_with_data    (GArray           *array,
 				   GCompareDataFunc  compare_func,
diff --git a/glib/gcompletion.h b/glib/gcompletion.h
index 900883e..ff6b68b 100644
--- a/glib/gcompletion.h
+++ b/glib/gcompletion.h
@@ -42,7 +42,7 @@ typedef gchar*          (*GCompletionFunc)      (gpointer);
 /* GCompletion
  */
 
-typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
+typedef gint (_cdecl *GCompletionStrncmpFunc) (const gchar *s1,
 					const gchar *s2,
 					gsize        n);
 
diff --git a/glib/gregex.c b/glib/gregex.c
index 091b418..cd29db5 100644
--- a/glib/gregex.c
+++ b/glib/gregex.c
@@ -1097,7 +1097,7 @@ g_regex_new (const gchar         *pattern,
 	{
 	  msg = N_("PCRE library is compiled without UTF8 support");
 	  g_critical ("%s", msg);
-	  g_set_error_literal (error, G_REGEX_ERROR, G_REGEX_ERROR_COMPILE, gettext (msg));
+	  g_set_error_literal (error, G_REGEX_ERROR, G_REGEX_ERROR_COMPILE, libintl_gettext (msg));
 	  return NULL;
 	}
 
@@ -1106,7 +1106,7 @@ g_regex_new (const gchar         *pattern,
 	{
 	  msg = N_("PCRE library is compiled without UTF8 properties support");
 	  g_critical ("%s", msg);
-	  g_set_error_literal (error, G_REGEX_ERROR, G_REGEX_ERROR_COMPILE, gettext (msg));
+	  g_set_error_literal (error, G_REGEX_ERROR, G_REGEX_ERROR_COMPILE, libintl_gettext (msg));
 	  return NULL;
 	}
 
diff --git a/glib/gstrfuncs.c b/glib/gstrfuncs.c
index 3aed62c..51349cc 100644
--- a/glib/gstrfuncs.c
+++ b/glib/gstrfuncs.c
@@ -3126,8 +3126,8 @@ _g_dgettext_should_translate (void)
     {
       gboolean should_translate = TRUE;
 
-      const char *default_domain     = textdomain (NULL);
-      const char *translator_comment = gettext ("");
+      const char *default_domain     = libintl_textdomain (NULL);
+      const char *translator_comment = libintl_gettext ("");
 #ifndef G_OS_WIN32
       const char *translate_locale   = setlocale (LC_MESSAGES, NULL);
 #else
@@ -3210,7 +3210,7 @@ g_dgettext (const gchar *domain,
   if (domain && G_UNLIKELY (!_g_dgettext_should_translate ()))
     return msgid;
 
-  return dgettext (domain, msgid);
+  return libintl_dgettext (domain, msgid);
 }
 
 /**
@@ -3241,7 +3241,7 @@ g_dngettext (const gchar *domain,
   if (domain && G_UNLIKELY (!_g_dgettext_should_translate ()))
     return n == 1 ? msgid : msgid_plural;
 
-  return dngettext (domain, msgid, msgid_plural, n);
+  return libintl_dngettext (domain, msgid, msgid_plural, n);
 }
 
 
diff --git a/glib/gtypes.h b/glib/gtypes.h
index 56cc648..abeb0b9 100644
--- a/glib/gtypes.h
+++ b/glib/gtypes.h
@@ -77,9 +77,9 @@ typedef double  gdouble;
 typedef void* gpointer;
 typedef const void *gconstpointer;
 
-typedef gint            (*GCompareFunc)         (gconstpointer  a,
+typedef gint            (_cdecl *GCompareFunc)         (gconstpointer  a,
                                                  gconstpointer  b);
-typedef gint            (*GCompareDataFunc)     (gconstpointer  a,
+typedef gint            (_cdecl *GCompareDataFunc)     (gconstpointer  a,
                                                  gconstpointer  b,
 						 gpointer       user_data);
 typedef gboolean        (*GEqualFunc)           (gconstpointer  a,
diff --git a/glib/guniprop.c b/glib/guniprop.c
index 8a28513..ac85953 100644
--- a/glib/guniprop.c
+++ b/glib/guniprop.c
@@ -420,7 +420,7 @@ struct Interval
   gunichar start, end;
 };
 
-static int
+static int _cdecl
 interval_compare (const void *key, const void *elt)
 {
   gunichar c = GPOINTER_TO_UINT (key);
diff --git a/glib/gutils.c b/glib/gutils.c
index 858603b..12f7d83 100644
--- a/glib/gutils.c
+++ b/glib/gutils.c
@@ -131,7 +131,7 @@ const guint glib_binary_age = GLIB_BINARY_AGE;
 static HMODULE glib_dll = NULL;
 
 #ifdef DLL_EXPORT
-
+/*
 BOOL WINAPI
 DllMain (HINSTANCE hinstDLL,
 	 DWORD     fdwReason,
@@ -142,7 +142,7 @@ DllMain (HINSTANCE hinstDLL,
 
   return TRUE;
 }
-
+*/
 #endif
 
 gchar *
@@ -330,7 +330,7 @@ g_atexit (GVoidFunc func)
   if (result)
     error = g_strerror (errno);
 #  else
-  result = atexit ((void (*)(void)) func);
+  result = atexit ((void (__cdecl *)(void)) func);
   if (result)
     error = g_strerror (errno);
 #  endif /* NeXT */
@@ -3304,13 +3304,13 @@ glib_gettext (const gchar *str)
     {
 #ifdef G_OS_WIN32
       gchar *tmp = _glib_get_locale_dir ();
-      bindtextdomain (GETTEXT_PACKAGE, tmp);
+      libintl_bindtextdomain (GETTEXT_PACKAGE, tmp);
       g_free (tmp);
 #else
       bindtextdomain (GETTEXT_PACKAGE, GLIB_LOCALE_DIR);
 #endif
 #    ifdef HAVE_BIND_TEXTDOMAIN_CODESET
-      bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
+      libintl_bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
 #    endif
       _glib_gettext_initialized = TRUE;
     }
diff --git a/glib/gutils.h b/glib/gutils.h
index 68a27ed..63f67dc 100644
--- a/glib/gutils.h
+++ b/glib/gutils.h
@@ -266,7 +266,7 @@ const gchar*	     _g_getenv_nomalloc	   (const gchar	*variable,
  * not defined, but use is actually abandoned. people should
  * use g_atexit() instead.
  */
-typedef	void		(*GVoidFunc)		(void);
+typedef	void	(__cdecl *GVoidFunc)		(void);
 #ifndef ATEXIT
 # define ATEXIT(proc)	g_ATEXIT(proc)
 #else
@@ -286,7 +286,7 @@ void	g_atexit		(GVoidFunc    func);
  * wants the function to be called when it *itself* exits (or is
  * detached, in case the caller, too, is a DLL).
  */
-int atexit (void (*)(void));
+//int atexit (void (*)(void));
 #define g_atexit(func) atexit(func)
 #endif
 
@@ -458,8 +458,8 @@ G_END_DECLS
 # define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)
 #else
 # define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)			\
-static char *dll_name;							\
-									\
+static char *dll_name;							
+/*									\
 BOOL WINAPI								\
 DllMain (HINSTANCE hinstDLL,						\
 	 DWORD     fdwReason,						\
@@ -478,7 +478,7 @@ DllMain (HINSTANCE hinstDLL,						\
     }									\
 									\
   return TRUE;								\
-}
+}*/
 
 #endif	/* !G_DISABLE_DEPRECATED */
 
diff --git a/gmodule/gmodule-win32.c b/gmodule/gmodule-win32.c
index 98d3fb9..f16437e 100644
--- a/gmodule/gmodule-win32.c
+++ b/gmodule/gmodule-win32.c
@@ -107,6 +107,9 @@ _g_module_close (gpointer handle,
       set_error ("");
 }
 
+#pragma warning(push)
+#pragma warning(disable:4706)
+
 static gpointer
 find_in_any_module_using_toolhelp (const gchar *symbol_name)
 {
@@ -206,6 +209,8 @@ find_in_any_module_using_psapi (const gchar *symbol_name)
   return p;
 }
 
+#pragma warning(pop) 
+
 static gpointer
 find_in_any_module (const gchar *symbol_name)
 {
diff --git a/gobject/gparam.c b/gobject/gparam.c
index 139baa0..4c7a7b5 100644
--- a/gobject/gparam.c
+++ b/gobject/gparam.c
@@ -1139,7 +1139,7 @@ g_param_spec_pool_list_owned (GParamSpecPool *pool,
   return data[0];
 }
 
-static gint
+static gint _cdecl
 pspec_compare_id (gconstpointer a,
 		  gconstpointer b)
 {
