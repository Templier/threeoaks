<?xml version="1.0"?>
<package>
<?component error="true" debug="true"?>
<comment>
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Weather Underground Provider component
//
// Copyright (c) 2009, Julien Templier
// All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////
// * $LastChangedRevision$
// * $LastChangedDate$
// * $LastChangedBy$
///////////////////////////////////////////////////////////////////////////////////////////////
// 
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//	1. Redistributions of source code must retain the above copyright notice, this list of
//		 conditions and the following disclaimer. 
//	2. Redistributions in binary form must reproduce the above copyright notice, this list
//		 of conditions and the following disclaimer in the documentation and/or other materials
//		 provided with the distribution. 
//	3. The name of the author may not be used to endorse or promote products derived from this
//		 software without specific prior written permission. 
//
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//	OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//	GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
//	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//	POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////////////////////////
</comment>

<component id="WUnderground">
	<comment>
		Weather Underground provider
	</comment>
	<registration description="Weather Underground Provider"
      			  progid="DXWeatherProvider.WUnderground"
      			  version="1"
      	    	  classid="{DFF07170-3A66-41e8-9685-67CC07173146}"/>  
      	    	  
    <object id="m_locations" 	progid="Scripting.Dictionary" />  
    <object id="m_alerts" 		progid="Scripting.Dictionary" />  
    <object id="m_forecast" 	progid="Scripting.Dictionary" />  
    <object id="m_cameras" 		progid="Scripting.Dictionary" />  
    
    <object id="m_request" 		progid="Microsoft.XmlDom" /> 
	    
	<public>
		<property name="ID">
			<get />
		</property>
		
		<property name="Name">
			<get />
		</property>
		
		<property name="UseMetricSystem" internalName="m_useMetricSystem" />
		
		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>
		
		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>
		
		<method name="Abort" />
		
		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon 
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- airport code
				- location (ie. station) ID
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon 
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon 
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>			
	</public>
	
	<resource id="provider_id">WUnderground</resource>
	<resource id="provider_name">Weather Underground</resource>
	<resource id="url_locations">http://api.wunderground.com/auto/wui/geo/GeoLookupXML/index.xml?query=</resource>
	<resource id="url_weather">http://api.wunderground.com/auto/wui/geo/WXCurrentObXML/index.xml?query=</resource>
	<resource id="url_station">http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=</resource>
	<resource id="url_alerts">http://api.wunderground.com/auto/wui/geo/AlertsXML/index.xml?query=</resource>
	<resource id="url_forecast">http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=</resource>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**
	
	var ErrorCode 			= getComponent("WeatherError");
	
	// Data
	var m_weather   		= null;
	var m_lastUpdateTime	= null;
	
	// Helper
	var m_helper			= getComponent("WeatherHelper");
	var m_dateHelper		= getComponent("DateEx");

	// callbacks
	var m_locationsCallback = null;
	var m_weatherCallback 	= null;
	var m_alertsCallback 	= null;
	var m_forecastCallback  = null;
	var m_camerasCallback   = null;
	var m_errorCallback 	= null;
	
	var m_useMetricSystem = true;
	
	///////////////////////////////
	// Properties
	///////////////////////////////
	function get_ID() {
		return getResource("provider_id");
	}
	
	function get_Name() {
		return getResource("provider_name");
	}	
	
	///////////////////////////////
	// Utilities
	///////////////////////////////
	function getComponent(id) {		
		//#ifdef DEBUG
		var LIB_FOLDER = "D:/Sources/Company/src/trunk/src/DesktopX/DXScriptLibrary";
		
		if (id == "DateEx")
			return GetObject("script:" + LIB_FOLDER + "/I18N/DateEx.wsc");
		else
			return GetObject("script:" + LIB_FOLDER + "/Weather/Weather.wsc#" + id);
		//#else
		//return createComponent(id);
		//#endif
	}
	
	// Get a query string, using data in priority order
	function getQueryString(locationQuery) {
		
		// Check that location query is not null
		if (locationQuery == null)
			return "";
				
		if (locationQuery.CustomQueryString != "")
			return locationQuery.CustomQueryString;
		
		if (locationQuery.ZipCode != "")
			return locationQuery.ZipCode;
			
		if (locationQuery.ID != "")
			return locationQuery.ID;		
			
		if (locationQuery.City != "" && locationQuery.State != "")
			return locationQuery.City + ", " + locationQuery.State;
			
		if (locationQuery.City != "")
			return locationQuery.City;
			
		if (locationQuery.State != "")
		 	return locationQuery.State;
		 	
		if (locationQuery.Country != "")
			return locationQuery.Country;
			
		if (locationQuery.AirportCode != "")
			return locationQuery.AirportCode;
			
		if (locationQuery.Latitude != "" && locationQuery.Longitude != "")
			return locationQuery.Latitude + "," + locationQuery.Longitude;
			
		return "";		
	}
	
	// Get a query string for the weather info (airport code / id only)
	function getWeatherQueryString(locationQuery)
	{		
		// Check that location query is not null
		if (locationQuery == null)
			return "";
			
		if (locationQuery.AirportCode != "")
			return getResource("url_weather") + locationQuery.AirportCode;
		
		if (locationQuery.ID != "")
			return getResource("url_station") + locationQuery.ID;
		
		return "";
	}

	///////////////////////////////
	// Misc parsing functions
	///////////////////////////////	
	
	// Parse elevation string and remove unit at the end / convert to metric system if needed
	function parseElevation(elevation)
	{
		// FIXME: remove "ft" at the end of the elevation data and Trim the string
		return m_helper.Trim(elevation);
	}
	
	// Parse humidity string and remove % at the end
	function parseHumidity(humidity)
	{
		// FIXME: remove "%" at the end if present
		return m_helper.Trim(humidity);
	}
	
	// Parse speed string, remove unit at the end / convert to metric system if needed
	function parseSpeed(speed)
	{
		// FIXME: remove "mph" at the end if present, and convert to metric if needed
		return m_helper.Trim(speed);
	}
	
	// Parse speed heat/windchill
	function parseHeat(heat)
	{
		var trimmed = m_helper.Trim(heat);
		
		if (heat == "NA")
			return "";
			
		return heat;
	}
	
	// Parse weather code and return a code number
	function parseCode(code)
	{
		// FIXME: convert from string code to weather icon number
		return m_helper.Trim(code);
	}	
	
	///////////////////////////////
	// Public functions
	///////////////////////////////
	
	// Setup license
	function SetLicense(id, key) {
		// Not used by this provider: always return E_OK
		return ErrorCode.E_OK;
	}
	
	// Set callbacks
	function RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback) {
		m_locationsCallback = locationsCallback;
		m_weatherCallback 	= weatherCallback;
		m_alertsCallback 	= alertsCallback;
		m_forecastCallback  = forecastCallback;
		m_camerasCallback   = camerasCallback;
		m_errorCallback 	= errorCallback;
	}
	
	// Abort current request
	function Abort()
	{
		m_request.abort();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get a list of locations
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetLocations(locationQuery) {
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return ErrorCode.E_NOTAVAILABLE;
		
		// Reset DOM
		m_request.abort();
		
		m_request.onreadystatechange = OnLocationsResponse;
		m_request.async = true;
		m_request.load(getResource("url_locations") + getQueryString(locationQuery));
		
		return ErrorCode.E_OK;		
	}
	
	function OnLocationsResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!m_helper.CheckParserError(m_request, m_errorCallback, ErrorCode))
			return;
			
		// Clear any previous results
		m_locations.RemoveAll();	
		
		// locations index
		var i = 0;
		
		// Check if we got an intermediate list and parse it
		var locations = m_request.getElementsByTagName("locations");
		if (locations.length != 0) {			
			
			var locationsEnumerator = new Enumerator(locations[0].getElementsByTagName("location"));		
			for (var enumerator = locationsEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
			{						
			    var entry = enumerator.item();
			    var city = getComponent("WeatherLocation");
			    
			    // we have no way to determine wether the second part is a state or a country,
			    // so we use the CustomQueryString property    
			    
			    // TODO if type == CITY, this is a US city and the second part is a state
			    // for INTLCITY, we cannot say whether this is a state or a country (ex: London, Ontario => in Canada)
			    city.CustomQueryString =  m_helper.GetNodeValue(entry, "name/text()");				  
			    
			    m_locations.Add(i, city);		    
			    i++;
			}
			
			m_locationsCallback(m_locations);
			return;
		}
				
			
		// Get the weather stations
		var stations = m_request.getElementsByTagName("nearby_weather_stations");
		if (stations.length == 0) {
			m_locationsCallback(m_locations);
			return;
		}
			
		// List airports
		var airportNode = stations[0].getElementsByTagName("airport");
		if (airportNode.length == 0) {
			m_locationsCallback(m_locations);
			return;
		}	
		
		var airportEnumerator = new Enumerator(airportNode[0].getElementsByTagName("station"));		
		for (var enumerator = airportEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
		{						
		    var entry = enumerator.item();
		    var airport = getComponent("WeatherLocation");
		    
		    airport.City 		 = m_helper.GetNodeValue(entry, "city/text()");	
		    airport.State  		 = m_helper.GetNodeValue(entry, "state/text()");	
		    airport.Country 	 = m_helper.GetNodeValue(entry, "country/text()");	
		    airport.AirportCode  = m_helper.GetNodeValue(entry, "icao/text()");	
		    airport.Latitude 	 = m_helper.GetNodeValue(entry, "lat/text()");	
		    airport.Longitude    = m_helper.GetNodeValue(entry, "lon/text()");			    
		    
		    m_locations.Add(i, airport);		    
		    i++;
		}
		
		// List personal weather stations
		var personalStations = stations[0].getElementsByTagName("pws");
		if (personalStations.length == 0) {
			m_locationsCallback(m_locations);
			return;
		}
			
		var pwsEnumerator = new Enumerator(personalStations[0].getElementsByTagName("station"));		
		for (var enumerator = pwsEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
		{						
		    var entry = enumerator.item();
		    var pws = getComponent("WeatherLocation");
		    
		    pws.Name	  = m_helper.GetNodeValue(entry, "neighborhood/text()");	
		    pws.City 	  = m_helper.GetNodeValue(entry, "city/text()");	
		    pws.State  	  = m_helper.GetNodeValue(entry, "state/text()");	
		    pws.Country   = m_helper.GetNodeValue(entry, "country/text()");	
		    pws.ID  	  = m_helper.GetNodeValue(entry, "id/text()");	
		    
		    if (m_useMetricSystem)
		    	pws.Distance  = m_helper.GetNodeValue(entry, "distance_km/text()");			    
		    else
		    	pws.Distance  = m_helper.GetNodeValue(entry, "distance_mi/text()");
		    
		    m_locations.Add(i, pws);		    
		    i++;
		}
		
		m_locationsCallback(m_locations);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get the current weather
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetWeather(locationQuery) {				
		// Check query for validity
		if (getWeatherQueryString(locationQuery) == "")
			return ErrorCode.E_NOTAVAILABLE;
					
		// Reset DOM
		m_request.abort();
		
		m_request.onreadystatechange = OnWeatherResponse;
		m_request.async = true;
		m_request.load(getWeatherQueryString(locationQuery));
		
		return ErrorCode.E_OK;		
	}
	
	function OnWeatherResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!m_helper.CheckParserError(m_request, m_errorCallback, ErrorCode))
			return;

		// Reset weather object
		m_weather = null;
		m_weather = getComponent("WeatherInfo");
			
		// Parse weather
		var observation = m_request.selectNodes("current_observation");
		if (observation.length == 0) {
			m_weatherCallback(m_weather);	
			return;
		}
		
		// Set unit system
		m_weather.UseMetricSystem = m_useMetricSystem;
		
		///////////////////////////
		//  Parse location data  //
		///////////////////////////
		
		// Check that station ID is not empty
		var station_id = m_helper.GetNodeValue(observation[0], "station_id/text()");
		if (station_id == "")
		{
			m_errorCallback(ErrorCode.E_ERROR, "Response is empty. Please check that the station code you used is valid!");
			return;
		}		
		
		// Airport location
		var location = observation[0].getElementsByTagName("display_location");
		if (location.length != 0) {
			
			m_weather.Location = getComponent("WeatherLocation");
			
			m_weather.Location.City  	 = m_helper.GetNodeValue(location[0], "city/text()");		
			m_weather.Location.State	 = m_helper.GetNodeValue(location[0], "state_name/text()");		
			m_weather.Location.Country   = m_helper.GetNodeValue(location[0], "country/text()");		
			m_weather.Location.ZipCode   = m_helper.GetNodeValue(location[0], "zip/text()");		
			m_weather.Location.Latitude  = m_helper.GetNodeValue(location[0], "latitude/text()");		
			m_weather.Location.Longitude = m_helper.GetNodeValue(location[0], "longitude/text()");		
						
			m_weather.Location.Elevation = parseElevation(m_helper.GetNodeValue(location[0], "elevation/text()"));
			
			// Station ID goes into the location airport code
			m_weather.Location.AirportCode = station_id;
		} 
		
		// Personal weather station
		location = observation[0].getElementsByTagName("location");
		if (location.length != 0) {
			
			m_weather.Location = getComponent("WeatherLocation");
			
			m_weather.Location.Name 	 = m_helper.GetNodeValue(location[0], "neighborhood/text()");		
			m_weather.Location.City  	 = m_helper.GetNodeValue(location[0], "city/text()");		
			m_weather.Location.State	 = m_helper.GetNodeValue(location[0], "state/text()");					
			m_weather.Location.ZipCode   = m_helper.GetNodeValue(location[0], "zip/text()");		
			m_weather.Location.Latitude  = m_helper.GetNodeValue(location[0], "latitude/text()");		
			m_weather.Location.Longitude = m_helper.GetNodeValue(location[0], "longitude/text()");		
						
			m_weather.Location.Elevation = parseElevation(m_helper.GetNodeValue(location[0], "elevation/text()"));				
			
			// Station ID goes into the location ID
			m_weather.Location.ID        =  station_id;
		}
		
		//////////////////////////
		//  Parse weather data  //
		//////////////////////////
		
		// Use credit name as a weather station name
		m_weather.Station		  = m_helper.GetNodeValue(observation[0], "credit/text()");
		m_weather.Type 			  = m_helper.GetNodeValue(observation[0], "station_type/text()");
		
		// Observation date
		m_weather.Date = m_dateHelper.FromEpoch(m_helper.GetNodeValue(observation[0],  "observation_epoch/text()"));
		
		// Temperature
		if (m_useMetricSystem)
			m_weather.Temperature = m_helper.GetNodeValue(observation[0], "temp_c/text()");
		else
			m_weather.Temperature = m_helper.GetNodeValue(observation[0], "temp_f/text()");
			
		// Humidity
		m_weather.Humidity 		  = parseHumidity(m_helper.GetNodeValue(observation[0], "relative_humidity/text()"));
		
		// Wind
		m_weather.WindDescription = m_helper.GetNodeValue(observation[0], "wind_string/text()");
		m_weather.WindDirection   = m_helper.GetNodeValue(observation[0], "wind_dir/text()");
		m_weather.WindDegrees 	  = m_helper.GetNodeValue(observation[0], "wind_degrees/text()");
		m_weather.WindSpeed		  = parseSpeed(m_helper.GetNodeValue(observation[0], "wind_mph/text()"));
		m_weather.WindGust 		  = parseSpeed(m_helper.GetNodeValue(observation[0], "wind_gust_mph/text()"));
	    
	    // Pressure
	    if (m_useMetricSystem)
	    	m_weather.Pressure	  = m_helper.GetNodeValue(observation[0], "pressure_mb/text()");
	    else
	    	m_weather.Pressure	  = m_helper.GetNodeValue(observation[0], "pressure_in/text()");
	    	
	    // Dew Point
	    m_weather.DewPointDescription = m_helper.GetNodeValue(observation[0], "dewpoint_string/text()");
	    if (m_useMetricSystem)
	    	m_weather.DewPoint	  = m_helper.GetNodeValue(observation[0], "dewpoint_c/text()");
	    else
	    	m_weather.DewPoint	  = m_helper.GetNodeValue(observation[0], "dewpoint_f/text()");
	    	
	    // Heat index
	    m_weather.HeatDescription = parseHeat(m_helper.GetNodeValue(observation[0], "heat_index_string/text()"));
		if (m_useMetricSystem)
	    	m_weather.HeatIndex	  = parseHeat(m_helper.GetNodeValue(observation[0], "heat_index_c/text()"));
	    else
	    	m_weather.HeatIndex	  = parseHeat(m_helper.GetNodeValue(observation[0], "heat_index_f/text()"));			
	    	
	    // Solar Radiation & UV	
	    m_weather.SolarRadiation  = m_helper.GetNodeValue(observation[0], "solar_radiation/text()");			
	    m_weather.UV	  		  = m_helper.GetNodeValue(observation[0], "UV/text()");			
	    	
	    // Wind chill
	    m_weather.WindChillDescription = parseHeat(m_helper.GetNodeValue(observation[0], "windchill_string/text()"));
		if (m_useMetricSystem)
	    	m_weather.WindChill	  = parseHeat(m_helper.GetNodeValue(observation[0], "windchill_c/text()"));
	    else
	    	m_weather.WindChill	  = parseHeat(m_helper.GetNodeValue(observation[0], "windchill_f/text()"));		
	    		    
	    // Visibility
	    if (m_useMetricSystem)
	    	m_weather.Visibility  = m_helper.GetNodeValue(observation[0], "visibility_km/text()");
	    else
	    	m_weather.Visibility  = m_helper.GetNodeValue(observation[0], "visibility_mi/text()");
	    		    	
	    // Weather code
	    m_weather.Code    		  = parseCode(m_helper.GetNodeValue(observation[0], "icon/text()"));
	    
	    // Precipitation
		if (m_useMetricSystem) {
	    	m_weather.Precipitation1H     = m_helper.GetNodeValue(observation[0], "precip_1hr_metric/text()");
	    	m_weather.PrecipitationToday  = m_helper.GetNodeValue(observation[0], "precip_today_metric/text()");	    	
	    } else {
	    	m_weather.Precipitation1H     = m_helper.GetNodeValue(observation[0], "precip_1hr_in/text()");
	    	m_weather.PrecipitationToday  = m_helper.GetNodeValue(observation[0], "precip_today_in/text()");	    
	    }
	    
	    //////////////////////////////
		//  Parse links to website  //
		//////////////////////////////		
		var links = getComponent("WeatherLinks");
		
		links.Current			 = m_helper.GetNodeValue(observation[0], "ob_url/text()");
		links.Forecast		 	 = m_helper.GetNodeValue(observation[0], "forecast_url/text()");
		links.History			 = m_helper.GetNodeValue(observation[0], "history_url/text()");
		links.Credit			 = m_helper.GetNodeValue(observation[0], "credit_URL/text()");
		links.Logo				 = m_helper.GetNodeValue(observation[0], "ob_url/text()");
		
		m_weather.Links = links;
	    	
		m_weatherCallback(m_weather);	
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////		
	// Get a list of alerts
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetAlerts(locationQuery) {
		
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return ErrorCode.E_NOTAVAILABLE;
		
		// Reset DOM
		m_request.abort();
		
		m_request.onreadystatechange = OnAlertsResponse;
		m_request.async = true;
		m_request.load(getResource("url_alerts") + getQueryString(locationQuery));
		
		return ErrorCode.E_OK;		
	}
	
	function OnAlertsResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!m_helper.CheckParserError(m_request, m_errorCallback, ErrorCode))
			return;

		// Clear any previous results
		m_alerts.RemoveAll();
		
		// Parse alert data
		var i = 0;
		var entryEnumerator = new Enumerator(m_request.getElementsByTagName("AlertItem"));		
		for (var enumerator = entryEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
		{						
		    var entry = enumerator.item();
		    var alert = getComponent("WeatherAlert");
		    
		    alert.Type 		   = m_helper.GetNodeValue(entry, "type/text()");	
		    alert.Description  = m_helper.GetNodeValue(entry, "description/text()");	
		    
		    alert.Date 		   = m_dateHelper.FromEpoch(m_helper.GetNodeValue(entry, "date/@epoch/text()"));	
		    alert.Expiration   = m_dateHelper.FromEpoch(m_helper.GetNodeValue(entry, "expires/@epoch/text()"));
		    	
		    alert.Message 	   = m_helper.GetNodeValue(entry, "message/text()");	
		    alert.Phenomena    = m_helper.GetNodeValue(entry, "phenomena/text()");	
		    alert.Significance = m_helper.GetNodeValue(entry, "significance/text()");	
		    
		    m_alerts.Add(i, alert);		    
		    i++;
		}
		
		m_alertsCallback(m_alerts);		
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get the forecast
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetForecast(locationQuery) {				
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return ErrorCode.E_NOTAVAILABLE;
		
		// Reset DOM
		m_request.abort();
		
		m_request.onreadystatechange = OnForecastResponse;
		m_request.async = true;
		m_request.load(getResource("url_forecast") + getQueryString(locationQuery));
		
		return ErrorCode.E_OK;	
	}
	
	function OnForecastResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!m_helper.CheckParserError(m_request, m_errorCallback, ErrorCode))
			return;

		// Clear any previous results
		m_forecast.RemoveAll();
			
		// forecast index
		var i = 0;	
		
		// FIXME: merge forecast text & forecast into the first x objects
		//  we need to check the forecast number to know where to put things
		
		// Parse text forecast (today / tonight)
		var text_forecast = m_request.selectNodes("forecast/txt_forecast");
		if (text_forecast.length != 0) {
			
			var date = m_dateHelper.GetDate().parseExact(m_helper.GetNodeValue(text_forecast[0], "date/text()"), "h:mm tt zzz");
			
			if (date == null)
				date = m_dateHelper.GetDate().parseExact(m_helper.GetNodeValue(text_forecast[0], "date/text()"), "h:mm tt");
			
			var textforecastEnumerator = new Enumerator(text_forecast[0].getElementsByTagName("forecastday"));
			for (var enumerator = textforecastEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
			{		
			    var entry = enumerator.item();
			    var forecast = getComponent("WeatherInfo");
				
				// Description
			    forecast.Description = m_helper.GetNodeValue(entry, "title/text()");
			    
			    // Weather code
	   			forecast.Code     = parseCode(m_helper.GetNodeValue(entry, "icon/text()"));
				
				// Forecast text
				forecast.ForecastDescription = m_helper.GetNodeValue(entry, "fcttext/text()");
				
				// Set day part
				if (forecast.Description == "Today")
					forecast.DayPart = forecast.DAY_PART_DAY;
				
				if (forecast.Description.search("Tonight") != -1)
					forecast.DayPart = forecast.DAY_PART_NIGHT;
									
				forecast.Date = date;
			    			    
			  	m_forecast.Add(i, forecast);    
			    i++;
			}
		}			
		
		// Parse detailed forecast
		var forecastNode = m_request.selectNodes("forecast/simpleforecast");
		if (forecastNode.length != 0) {
			
			var forecastEnumerator = new Enumerator(forecastNode[0].getElementsByTagName("forecastday"));
			for (var enumerator = forecastEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
			{						
			    var entry = enumerator.item();
			    var forecast = getComponent("WeatherInfo");
			    
			    // Description
			    forecast.Description = m_helper.GetNodeValue(entry, "conditions/text()");
			    
			    // Weather code
	   			forecast.Code     = parseCode(m_helper.GetNodeValue(entry, "icon/text()"));
			    			    			   
			    // High & Low
			    if (m_useMetricSystem) {
			    	forecast.ForecastHigh		= m_helper.GetNodeValue(entry, "high/celsius/text()");
			    	forecast.ForecastLow		= m_helper.GetNodeValue(entry, "low/celsius/text()");	    	
			    } else {
			    	forecast.ForecastHigh		= m_helper.GetNodeValue(entry, "high/fahrenheit/text()");
			    	forecast.ForecastLow		= m_helper.GetNodeValue(entry, "low/fahrenheit/text()");	
			    }
			    
			    // Date
			    forecast.Date = m_dateHelper.FromEpoch(m_helper.GetNodeValue(entry, "date/epoch/text()"));			    
			    
			    m_forecast.Add(i, forecast);		    
			    i++;
			}
		}

		// Parse moon phase (insert in first forecast)
		var moon_phase = m_request.selectNodes("forecast/moon_phase");
		if (moon_phase.length != 0)
		{
			// Get the first forecast
			var forecast = m_forecast.Item(0);			
			if (forecast == null)
				forecast = getComponent("WeatherInfo");
				
			// Update Moon info
			forecast.MoonIlluminated 		 = m_helper.GetNodeValue(moon_phase[0], "percentIlluminated/text()"); 
			forecast.MoonAge				 = m_helper.GetNodeValue(moon_phase[0], "ageOfMoon/text()");
			
			// Sunrise / Sunset times
			var sunrise_hour 				 = m_helper.GetNodeValue(moon_phase[0], "sunrise/hour/text()");
			var sunrise_minute 				 = m_helper.GetNodeValue(moon_phase[0], "sunrise/minute/text()");
			var sunset_hour 				 = m_helper.GetNodeValue(moon_phase[0], "sunset/hour/text()")
			var sunset_minute 				 = m_helper.GetNodeValue(moon_phase[0], "sunset/minute/text()")
			
			if (sunrise_hour != "" && sunrise_minute != "")
				forecast.Sunrise = m_dateHelper.GetDate().set({ 
									 hour: parseInt(sunrise_hour),
									 minute: parseInt(sunrise_minute)});
								 
			if (sunset_hour != "" && sunset_minute != "")
				forecast.Sunset = m_dateHelper.GetDate().set({ 
									 hour: parseInt(sunset_hour),
									 minute: parseInt(sunset_minute)});
			
			m_forecast.Item(0) = forecast;		
		}
		
			
		m_forecastCallback(m_forecast);		
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get a list of cameras
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetCameras(locationQuery) {
		// TODO we should cache results from GetLocations and only make a new call if the query differs.		
		return ErrorCode.E_NOTIMPLEMENTED;
	}	
	
	
	]]>
	</script>

</component>

</package>
