<?xml version="1.0"?>
<package>
<?component error="true" debug="true"?>
<comment>
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Weather Script Component
//
// Copyright (c) 2009, Julien Templier
// All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////
// * $LastChangedRevision$
// * $LastChangedDate$
// * $LastChangedBy$
///////////////////////////////////////////////////////////////////////////////////////////////
// 
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//	1. Redistributions of source code must retain the above copyright notice, this list of
//		 conditions and the following disclaimer. 
//	2. Redistributions in binary form must reproduce the above copyright notice, this list
//		 of conditions and the following disclaimer in the documentation and/or other materials
//		 provided with the distribution. 
//	3. The name of the author may not be used to endorse or promote products derived from this
//		 software without specific prior written permission. 
//
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//	OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//	GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
//	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//	POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////////////////////////
</comment>

<component id="WeatherController">
	<comment>
	Main weather controller
	</comment>
	<registration description="Weather Controller"
      			  progid="DXWeather.Controller"
      			  version="1"
      	    	  classid="{2DB557E8-FA03-40ce-B559-D0BCCFCB48CC}"/>  
      	    	  
	<object id="m_providers" 	progid="Scripting.Dictionary" />  
	<object id="m_providerList" progid="Scripting.Dictionary" /> 
	
	<public>
		<comment>
			Unit system in use
			
			Default is metric system. Set to False to use the English/Imperial unit system.
		</comment>
		<property name="UseMetricSystem">
			<get />
			<put />
		</property>
		
		<comment>
			Setup the license
			  - id: partner id
			  - key: license key
			  
			returns: E_OK if the license was set properly
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
					 
			You can use that method to check whether the current provider needs license information.
			
			Ex: Try calling the method first with empty information: SetLicense("", ""). If you get E_OK,
			no license information is needed, otherwise, you need to provide some license information.
			You can check if id, key or both are needed in the same way.
		</comment>
		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>
		
		<comment>
			Returns a dictionnary of available providers (key = provider id, value = provider name)
		</comment>
		<property name="Providers">
			<get />
		</property>
		
		<comment>
			Set the provider to use
			  - id: provider id (key) as retrieved bu GetProviders
			  
			returns: E_OK if the provider was set correctly
				     E_ERROR if the id is not a valid provider id (the current provider will be reset to Nothing)
		</comment>
		<method name="SetProvider">
			<parameter name="id" />
		</method>
	
		<comment>
			Register callbacks for weather controller calls
			  - locationCallback(WeatherLocation[] locations)
			  		called when new location results are available
			  		
			  - weatherCallback(WeatherInfo weather)
			  		called when new weather information is available
			  		
			  - alertsCallback(WeatherAlert[] alerts)
			  		called when new alert information is available
			  		
			  - forecastCallback(WeatherInfo[] forecast)
			  		called when new forecast information is available
			  		
			  - camerasCallback(WeatherCamera[] cameras)
			  		called when new camera results are available
			  		
			  - errorCallback(int errorCode, string errorMessage)
			  		called when an error is raised during an operation						  
		</comment>
		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>
		
		<comment>
			Get a WeatherLocation object to be used in a query
		</comment>
		<method name="GetQueryObject" />

		<comment>
			Get a list of locations.
			  - locationQuery: a WeatherLocation object with the proper fields set
			  
			returns: E_OK if the request was send					 
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get the current weather
			  - locationQuery: a WeatherLocation object with the proper fields set
			 			 		 (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get a list of alerts
			  - locationQuery: a WeatherLocation object with the proper fields set
			  					 (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider	
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set		  
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get the forecast
			  - locationQuery: a WeatherLocation object with the proper fields set
							    (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set			  
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get a list of cameras.
			  - locationQuery: a WeatherLocation object with the proper fields set
			  					 (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider	
					 E_INVALIDLICENSE if license information is missing
					 E_ERROR if no provider has been set		  
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Abort any operation that is in progress
			  
			returns: E_OK if the function succeeded	
					 E_ERROR if no provider has been set		  
		</comment>
		<method name="Abort" />
		
		<comment>
			Add a new provider
			  - id: provider id
			  - provider: provider script component instance
			  
			This is targeted to developers, allowing them to develop a new weather provider without having to modify this file
			  
			returns: E_OK if the provider was added correctly
				     E_ERROR if the id already exists
		</comment>
		<method name="AddProvider">
			<parameter name="provider" />
		</method>
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**	
	
	// Error
	var ErrorCode = createComponent("WeatherError");
	
	// Callbacks
	var m_locationsCallback = null;
	var m_weatherCallback = null;
	var m_alertsCallback = null;
	var m_forecastCallback = null;
	var m_camerasCallback = null;
	var m_errorCallback = null;
	
	// Current provider
	var m_currentProvider = null;
	var m_useMetricSystem = true;
	
	// License information
	var m_id = "";
	var m_key = "";
	
	Init();
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// Provider registration
	function Init() {				
		//#ifndef DEBUG
		//AddProvider(createComponent("WUnderground"));
		//AddProvider(CreateComponent("TWC"));
		//AddProvider(CreateComponent("NOAA"));
		//#endif
	}	

	/*=============================================================================================================================
	=
	= Public Methods
	=
	=============================================================================================================================*/
	
	// Get the unit system in use
	function get_UseMetricSystem() {
		return m_useMetricSystem;
	}
	
	function put_UseMetricSystem(system) {
		m_useMetricSystem = system;
		
		// Update the provider
		if (m_currentProvider != null)
			m_currentProvider.UseMetricSystem = m_useMetricSystem;		
	}
	
	// Get the list of available providers
	function get_Providers() {
		return m_providerList;
	}
	
	// Setup license
	function SetLicense(id, key) {
		m_id = id;
		m_key = key;
		
		// Update license information
		if (m_currentProvider == null)
			return ErrorCode.E_ERROR;
		
		return m_currentProvider.SetLicense(m_id, m_key);		
	}
	
	// Set the provider to use
	function SetProvider(id) {
		if (!m_providers.Exists(id)) {
			// Reset the current provider
			m_currentProvider = null;
			
			return ErrorCode.E_ERROR;
		}
		
		m_currentProvider = m_providers.Item(id);
		m_currentProvider.UseMetricSystem = m_useMetricSystem;
		m_currentProvider.SetLicense(m_id, m_key);
		
		// Register callbacks
		// we have to do that and duplicate all the registration code in all providers,
		// since we cannot use events without registering the component
		m_currentProvider.RegisterCallbacks(OnLocations,
											OnWeather,
											OnAlerts,
											OnForecast,
											OnCameras,
											OnError);
		
		return ErrorCode.E_OK;
	}
	
	// Set the callbacks
	function RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback) {
		m_locationsCallback = locationsCallback;
		m_weatherCallback 	= weatherCallback;
		m_alertsCallback 	= alertsCallback;
		m_forecastCallback  = forecastCallback;
		m_camerasCallback   = camerasCallback;
		m_errorCallback 	= errorCallback;
	}
	
	// Add provider to provider list
	function AddProvider(provider) {			
		// Add the new provider to the internal provider list
		m_providers.Add(provider.ID, provider);
		
		// we use a separate provider list to not expose the providers directly to the user script
		m_providerList.Add(provider.ID, provider.Name);
		
		return ErrorCode.E_OK;
	}
	
	// Abort any call in progress
	function Abort() {
		if (m_currentProvider == null)		
			return ErrorCode.E_ERROR;
		
		m_currentProvider.Abort();
	
		return ErrorCode.E_OK;
	}	
	
	// Get a WeatherLocation object
	function GetQueryObject() {
		return createComponent("WeatherLocation");
	}
	
	// Get a WeatherHelper object
	function GetHelper() {
		return m_helperObject;
	}
	
	// Get a list of locations
	function GetLocations(locationQuery) {
		if (m_currentProvider == null)		
			return ErrorCode.E_ERROR;
		
		locationQuery.TrimValues();
		return m_currentProvider.GetLocations(locationQuery);
	}
	
	// Get the current weather
	function GetWeather(locationQuery) {
		if (m_currentProvider == null)		
			return ErrorCode.E_ERROR;
		
		locationQuery.TrimValues();
		return m_currentProvider.GetWeather(locationQuery);
	}
	
	// Get a list of alerts
	function GetAlerts(locationQuery) {
		if (m_currentProvider == null)		
			return ErrorCode.E_ERROR;
		
		locationQuery.TrimValues();
		return m_currentProvider.GetAlerts(locationQuery);
	}
	
	// Get the forecast
	function GetForecast(locationQuery) {
		if (m_currentProvider == null)		
			return ErrorCode.E_ERROR;
		
		locationQuery.TrimValues();
		return m_currentProvider.GetForecast(locationQuery);
	}
	
	// Get a list of cameras
	function GetCameras(locationQuery) {
		if (m_currentProvider == null)		
			return ErrorCode.E_ERROR;
		
		locationQuery.TrimValues();
		return m_currentProvider.GetCameras(locationQuery);
	}	

	/*=============================================================================================================================
	=
	= Callbacks
	=
	=============================================================================================================================*/
	
	// We check here if the callback are defined, so we can call them without checking if they exist in each provider

	function OnLocations(locations) {
		if (m_locationsCallback != null)
			m_locationsCallback(locations);
	}
	
	function OnWeather(weather) {
		if (m_weatherCallback != null)
			m_weatherCallback(weather);
	}
	
	function OnAlerts(alerts) {
		if (m_alertsCallback != null)
			m_alertsCallback(alerts);
	}
	
	function OnForecast(forecast) {
		if (m_forecastCallback != null)
			m_forecastCallback(forecast);
	}
	
	function OnCameras(cameras) {
		if (m_camerasCallback != null)
			m_camerasCallback(cameras);
	}
	
	function OnError(code, value) {
		if (m_errorCallback != null)
			m_errorCallback(code, value);
	}	
		
	]]>
	</script>

</component>

<component id="WeatherError">
	<comment>
	Weather error codes
	</comment>
	<registration description="Weather Error codes"
      			  progid="DXWeather.Error"
      			  version="1"
      	    	  classid="{20AAB6F5-77DB-414e-8469-5D57441BFD19}"/>  
      	    	        	    
	<public>
		<property name="E_OK">
			<get />
		</property>
		
		<property name="E_ERROR">
			<get />
		</property>
		
		<property name="E_NOTAVAILABLE">
			<get />
		</property>
		
		<property name="E_NOTIMPLEMENTED">
			<get />
		</property>
		
		<property name="E_INVALIDLICENSE">
			<get />
		</property>
		
		<property name="E_PARSEERROR">
			<get />
		</property>
		
		
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**
	
	// Constants
	var E_OK 			 = 1;
	var E_ERROR 		 = 0;
	var E_NOTAVAILABLE   = -1;
	var E_NOTIMPLEMENTED = -2;
	var E_INVALIDLICENSE = -3;
	var E_PARSEERROR	 = -4;
	
	function get_E_OK()
	{
		return E_OK;
	}
	
	function get_E_ERROR()
	{
		return E_ERROR;
	}
	
	function get_E_NOTAVAILABLE()
	{
		return E_NOTAVAILABLE;
	}
	
	function get_E_NOTIMPLEMENTED()
	{
		return E_NOTIMPLEMENTED;
	}
	
	function get_E_INVALIDLICENSE()
	{
		return E_INVALIDLICENSE;
	}
	
	function get_E_PARSEERROR()
	{
		return E_PARSEERROR;
	}
	
	]]>
	</script>

</component>

<component id="WeatherInfo">
	<comment>
	Weather information
	</comment>
	<registration description="Weather Information"
      			  progid="DXWeather.Info"
      			  version="1"
      	    	  classid="{30EC2AE5-702A-4b2d-94BB-6CE09B399931}"/>  
      	    	      
	<public>
		<comment>
			Constants
		</comment>
		<property name="DAY_PART_DAY">
			<get/>
		</property>
		<property name="DAY_PART_NIGHT">
			<get/>
		</property>	
	
		<comment>
			Weather location info (WeatherLocation object)
		</comment>
		<property name="Location" 				internalname="m_location" />
		
		<comment>
			Weather station name
		</comment>
		<property name="Station" 				internalname="m_station" />
		
		<comment>
			Weather station type
		</comment>
		<property name="Type" 					internalname="m_type" />
		
		<comment>
			Weather info links (WeatherLinks object)
		</comment>
		<property name="Links" 					internalname="m_links" />
		
		<property name="Description"	 		internalname="m_description" />
		<property name="Code" 					internalname="m_code" />
		
		<property name="Date" 					internalname="m_date" />
		
		<property name="Temperature" 			internalname="m_temperature" />
		<property name="TemperatureFeel" 		internalname="m_temperatureFeel" />
		
		<property name="Humidity" 				internalname="m_humidity" />
		
		<property name="Precipitation1H" 		internalname="m_precipitation_1h" />
		<property name="PrecipitationToday" 	internalname="m_precipitation_today" />

		<property name="Visibility" 			internalname="m_visibility" />
		
		<property name="WindDescription" 		internalname="m_windDescription" />
		<property name="WindDirection" 			internalname="m_windDirection" />
		<property name="WindDegrees" 			internalname="m_windDegrees" />
		<property name="WindSpeed" 				internalname="m_windSpeed" />
		<property name="WindGust" 				internalname="m_windGust" />

		<property name="WindChillDescription" 	internalname="m_windChillDescription" />
		<property name="WindChill" 				internalname="m_windChill" />
		
		<property name="Pressure" 				internalname="m_pressure" />
				
		<property name="DewPointDescription" 	internalname="m_dewPointDescription" />
		<property name="DewPoint" 				internalname="m_dewPoint" />
				
		<property name="HeatDescription" 		internalname="m_heatDescription" />
		<property name="HeatIndex" 				internalname="m_heatIndex" />	
		
		<property name="SolarRadiation" 		internalname="m_solarRadiation" />
		<property name="UV" 					internalname="m_UV" />	
		
		<property name="Sunrise" 				internalname="m_sunrise" />
		<property name="Sunset"					internalname="m_sunset" />
		
		<property name="MoonPhaseDescription" 	internalname="m_moonPhaseDescription" />
		<property name="MoonPhaseCode" 			internalname="m_moonPhaseCode" />
		<property name="MoonIlluminated" 		internalname="m_moonIlluminated" />
		<property name="MoonAge" 				internalname="m_moonAge" />
		
		<property name="DayOfWeek" 				internalname="m_dayOfWeek" />
		<property name="DayPart" 				internalname="m_dayPart" />	
		
		<property name="ForecastDescription" 	internalname="m_forecastDescription" />		
		<property name="ForecastHigh"			internalname="m_forecastHigh" />		
		<property name="ForecastLow" 			internalname="m_forecastLow" />
		
		<property name="UseMetricSystem" 		internalName="m_useMetricSystem" />
		
		<method name="ToString" />
		
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**

	// Constants
	var DAY_PART_DAY = 0;
	var DAY_PART_NIGHT = 1;

	// Properties
	var m_useMetricSystem = true;
	var m_location = createComponent("WeatherLocation");	
	var m_links    = createComponent("WeatherLinks");		
			
	var m_station = "";
	var m_type = "";
	
	var m_description = "";
	var m_code = "";

	
	var m_temperature = "";
	var m_temperatureFeel = "";
	
	var m_humidity = "";
	var m_precipitation_1h = "";
	var m_precipitation_today = "";

	var m_visibility = "";
	
	var m_windDescription = "";
	var m_windDirection = "";
	var m_windDegrees = "";
	var m_windSpeed = "";
	var m_windGust = "";

	var m_windChillDescription = "";
	var m_windChill = "";
	
	var m_pressure = "";
			
	var m_dewPointDescription = "";
	var m_dewPoint = "";
			
	var m_heatDescription = "";
	var m_heatIndex = "";
	
	var m_solarRadiation = "";
	var m_UV = "";
	
	var m_sunrise = "";
	var m_sunset = "";
	
	var m_moonPhaseDescription = "";
	var m_moonPhaseCode = "";
	var m_moonIlluminated = "";
	var m_moonAge = "";
	
	var m_dayOfWeek = "";
	var m_dayPart = "";
	var m_date = "";
	
	var m_forecastDescription = "";
	var m_forecastCode = "";
	var m_forecastHigh = "";	
	var m_forecastLow = "";
	
	function get_DAY_PART_DAY()
	{
		return DAY_PART_DAY;
	}
	
	function get_DAY_PART_NIGHT()
	{
		return DAY_PART_NIGHT;
	}
	
	function ToString()
	{
		var text = m_location.ToString();
		
		if (text != "")
			 text += "\n";	
		
		// Station name & type
		text += append("Station", m_station);
		text += append("Type", m_type);
		
		// Description
		text += append("Description", m_description);
		text += append("Code", m_code);
			
		// Date & Time
		if (m_date != null)
			text += append("Date", m_date.toISOString());
			
		// Temperature / Humidity / Precipitation / Visibility
		text += append("Temperature", m_temperature);
		text += append("Temperature (Feel)", m_temperatureFeel);
		text += append("Humidity", m_humidity);
		text += append("Precipitation (1h)", m_precipitation_1h);			
		text += append("Precipitation (today)", m_precipitation_today);			
		text += append("Visibility", m_visibility);
		
		// Wind
		text += append("Wind Description", m_windDescription);
		text += append("Direction", m_windDirection);
		text += append("Degrees", m_windDegrees);
		text += append("Speed", m_windSpeed);
		text += append("Gust", m_windGust);
		text += append("WindChill Description", m_windChillDescription);
		text += append("Chill", m_windChill);
		
		// Pressure / Dew Point / Heat
		text += append("Pressure", m_pressure);
		text += append("DewPoint Description", m_dewPointDescription);
		text += append("DewPoint", m_dewPoint);
		text += append("Heat Description", m_heatDescription);
		text += append("Heat Index", m_heatIndex);
		
		// Solar Radiation & UV
		text += append("Solar Radiation", m_solarRadiation);
		text += append("UV", m_UV);		
		
		text += append("Day of week", m_dayOfWeek);
		text += append("Day part", m_dayPart);
		
		text += append("Forecast", m_forecastDescription);
		text += append("High", m_forecastHigh);
		text += append("Low", m_forecastLow);
		
		// Sunrise / Sunset / Moon / Day
		text += append("Sunrise", m_sunrise);
		text += append("Sunset", m_sunset);
		text += append("Moonphase", m_moonPhaseDescription);
		text += append("Moon Code", m_moonPhaseCode);
		text += append("Moon Illumination", m_moonIlluminated);
		text += append("Moon Age", m_moonAge);
		
		var links = m_links.ToString();
		
		if (links != "")
			 text += "\n" + links;
							
		return text;
	}
	
	function append(title, value)
	{
		if (value == null || value == "")
			return "";
			
		return title + ": " + value + "\n";
	}
	
	]]>
	</script>

</component>

<component id="WeatherAlert">
	<comment>
	Weather alert container
	</comment>
	<registration description="Weather alert"
      			  progid="DXWeather.Alert"
      			  version="1"
      	    	  classid="{D4F984BF-A90A-45da-A695-ACBD974B9924}"/>    
      	    
	<public>
		<property name="Type" internalname="m_type" />
		<property name="Description" internalname="m_description" />
		<property name="Date" internalname="m_date" />
		<property name="Expiration" internalname="m_expiration" />
		<property name="Message" internalname="m_message" />
		<property name="Phenomena" internalname="m_phenomena" />
		<property name="Significance" internalname="m_significance" />		
		
		<method name="ToString" />
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**
	
	var m_type = "";
	var m_description = "";
	var m_date = "";
	var m_expiration = "";
	var m_message = "";
	var m_phenomena = "";
	var m_significance = "";
	
	function ToString()
	{
		var text = m_description + " (" + m_type + ")" + "\n";		
		text += "Date: " + m_date + "\n";
		text += "Expiration: " + m_expiration + "\n";
		text += "Phenomena: " + m_phenomena + "\n";
		text += "Significance: " + m_significance + "\n";
		text += "Message: " + m_message + "\n";
		
		return text;
	}
	
	]]>
	</script>

</component>

<component id="WeatherLocation">
	<comment>
	Weather location/query container
	</comment>
	<registration description="Weather Location"
      			  progid="DXWeather.Location"
      			  version="1"
      	    	  classid="{BC017AA1-3732-4d88-89EC-68823C27ECD3}"/>  
      	    	   
	<public>
		<property name="ID" internalname="m_ID" />		
		<property name="Name" internalname="m_name" />
	
		<property name="Country" internalname="m_country" />		
		<property name="State" internalname="m_state" />
		<property name="City" internalname="m_city" />
		
		<property name="Timezone" internalname="m_timezone" />
		
		<property name="Latitude" internalname="m_latitude" />
		<property name="Longitude" internalname="m_longitude" />
		<property name="Elevation" internalname="m_elevation" />
		
		<property name="Distance" internalname="m_distance" />	
		
		<property name="AirportCode" internalname="m_airportCode" />
		<property name="ZipCode" internalname="m_zipCode" />		
		<property name="CityCode" internalname="m_cityCode" />
		
		<property name="CustomQueryString" internalname="m_customQueryString" />	
				
		<method name="TrimValues" />
		<method name="ToString" />
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**
    
	var m_ID = "";

	var m_country = "";
	var m_state = "";
	var m_city = "";
	
	var m_latitude = "";
	var m_longitude = "";
	
	var m_airportCode = "";
	var m_zipCode = "";
	var m_cityCode = "";
	
	var m_customQueryString = "";
	
	// Results-only data
	var m_name = "";
	var m_timezone = "";
	var m_elevation = "";
	var m_distance = "";

	// Trim values used in query
	function TrimValues()
	{
		// Helper
		var m_helper = createComponent("WeatherHelper");
		
		m_ID = m_helper.Trim(m_ID);		
			
		m_country = m_helper.Trim(m_country);
		m_state = m_helper.Trim(m_state);
		m_city = m_helper.Trim(m_city);
		
		m_latitude = m_helper.Trim(m_latitude);
		m_longitude = m_helper.Trim(m_longitude);
		
		m_airportCode = m_helper.Trim(m_airportCode);
		m_zipCode = m_helper.Trim(m_zipCode);
		m_cityCode = m_helper.Trim(m_cityCode);
		
		m_customQueryString = m_helper.Trim(m_customQueryString);				
	}
	
	function ToString()
	{
		var text = "";
		
		if (m_ID != "")
			text += "ID: " + m_ID + "\n";
			
		if (m_name != "")
			text += "Name: " + m_name + "\n";;
		
		// City	
		if (m_city != "" || m_state != "" || m_country !="") {
			text += "City: " + m_city;
			
			if (m_state != "")
				text += ", " + m_state;
				 
			if (m_country != "")
				text += " (" + m_country + ")"
				
			text += "\n";
		}
		
		// Coordinates
		if (m_latitude != "" || m_longitude != "")
			text += "Coordinates: " + m_latitude + ", " + m_longitude + "\n";
			
		// Distance & Elevation
		if (m_distance != "")
			text += "Distance: " + m_distance + "\n";
			
		if (m_elevation != "")
			text += "Elevation: " + m_elevation + "\n";
						
		// Codes
		if (m_zipCode != "")
			text += "Zipcode: " + m_zipCode + "\n";
			
		if (m_airportCode != "")
			text += "Airport: " + m_airportCode + "\n";
			
		if (m_cityCode != "")
			text += "City Code: " + m_cityCode + "\n";

		return text;
	}

	]]>
	</script>

</component>

<component id="WeatherLinks">
	<comment>
	Weather links container
		- current				
		- forecast
		- history
		- credit
		- misc.
	</comment>
	<registration description="Weather Links"
      			  progid="DXWeather.Links"
      			  version="1"
      	    	  classid="{ABD6A877-1597-4b60-AF0E-DD1D1CEA7683}"/>  
      	    	  
    <object id="m_promo" 	progid="Scripting.Dictionary" />   	    	  
      	    
	<public>
		<property name="Current" 		internalname="m_current" />
		<property name="Forecast" 		internalname="m_forecast" />
		<property name="History" 		internalname="m_history" />
		<property name="Credit" 		internalname="m_credit" />
		<property name="Logo" 			internalname="m_logo" />

		<property name="Promo" 			internalname="m_promo" />		
		
		<method name="ToString" />
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**
	
	var m_current = "";
	var m_forecast = "";
	var m_history = "";
	var m_credit = "";
	var m_logo = "";	
	
	function ToString()
	{
		var text = "";
		
		if (m_current != "")
			text += "Current: " + m_current + "\n";
			
		if (m_forecast != "")
			text += "Forecast: " + m_forecast + "\n";
			
		if (m_history != "")
			text += "History: " + m_history + "\n";
		
		if (m_credit != "")
			text += "Credit: " + m_credit + "\n";
			
		if (m_logo != "")
			text += "Logo: " + m_logo + "\n";
			
		if (m_promo.Count != 0) {
			text += "Promo links:\n\n";
			
			var keys = (new VBArray(m_promo.Keys())).toArray();
			var items = (new VBArray(m_promo.Items())).toArray();
			
			for (i in keys)
				text += keys[i] + " (" + items[i] + ")" + "\n";			
		}
			
		return text;
	}
	
	]]>
	</script>

</component>

<component id="WeatherHelper">
	<comment>
	Weather Helper functions
	</comment>
	<registration description="Weather Helper"
      			  progid="DXWeather.Helper"
      			  version="1"
      	    	  classid="{4FBA62F1-7479-42e2-84F1-8DE0927C0DAE}"/>  
      	    	  	    
	<public>
		
		<comment>
			Convert from C to F (with rounding)
		</comment>
		<method name="CtoF">
			<parameter name="temperature" />
		</method>
		
		<comment>
			Convert from F to C (with rounding)
		</comment>
		<method name="FtoC">
			<parameter name="temperature" />
		</method>
			
		<comment>
			Convert from meter to feet (with rounding)
		</comment>
		<method name="MtoFT">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from feet to meter (with rounding)
		</comment>
		<method name="FTtoM">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from kilometers to miles (with rounding)
		</comment>
		<method name="KMtoMI">
			<parameter name="distance" />
		</method>
		
		<comment>
			Convert from miles to kilometers (with rounding)
		</comment>
		<method name="MItoKM">
			<parameter name="distance" />
		</method>
		
		<comment>
			Convert from millibars to inches of mercury (with rounding)
		</comment>
		<method name="MBtoIN">
			<parameter name="pressure" />
		</method>
		
		<comment>
			Convert from inches of mercury to millibars (with rounding)
		</comment>
		<method name="INtoMB">
			<parameter name="pressure" />
		</method>
		
		<comment>
			Convert from millimeters to inches (with rounding)
		</comment>
		<method name="MMtoIN">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from inches to millimeters (with rounding)
		</comment>
		<method name="INtoMM">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from km/h to mp/h (with rounding)
		</comment>
		<method name="KMHtoMPH">
			<parameter name="speed" />
		</method>
		
		<comment>
			Convert from mp/h to km/h (with rounding)
		</comment>
		<method name="MPHtoKMH">
			<parameter name="speed" />
		</method>
		
		<comment>
			Remove multiple, leading or trailing spaces
		</comment>
		<method name="Trim">
			<parameter name="s" />
		</method>
		
		<comment>
			Remove all spaces
		</comment>
		<method name="RemoveSpaces">
			<parameter name="s" />
		</method>
		
		<comment>
			Check XmlDom object for parsing errors and report them
		</comment>
		<method name="CheckParserError">
			<parameter name="request" />
			<parameter name="callback" />
			<parameter name="ErrorCode" />
		</method>
		
		<comment>
			Try to get a node value and return "" if the node doesn't exists
		</comment>
		<method name="GetNodeValue">
			<parameter name="entry" />
			<parameter name="nodeName" />
		</method>

	</public>
	
	<script language="JScript">
	<![CDATA[
	
	//**Start Encode**
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Parsing & XML handling
	//
	/////////////////////////////////////////////////////////////////////////////////////////////
	
	// Check the request for parser errors
	function CheckParserError(request, callback, ErrorCode) {

		if (request.parseError.errorCode == 0)
			return true;
		
		if (request.text == "")
			callback(ErrorCode.E_ERROR, "Received empty response!");
		else {	
			var error = "Error parsing response xml: Error " + request.parseError.errorCode + ": " + request.parseError.reason;
			error += "/ Line " + request.parseError.line + " - position " + request.parseError.linepos;
			error += "/ Source: " + escape(request.parseError.srcText);
		
			callback(ErrorCode.E_PARSEERROR, error);
		}
		
		return false;
	}
	
	// Try to get a node value and return "" if the node doesn't exists
	function GetNodeValue(entry, nodeName)
	{
		 var node = entry.selectNodes(nodeName);
		 
		 if (node.length == 0)
		 	return "";
		 	
		 return node[0].nodeValue;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Unit conversion
	//
	/////////////////////////////////////////////////////////////////////////////////////////////
	
	function CtoF(temperature)
	{
		return FormatNumber((9/5) * temperature + 32, 1);
	}
	
	function FtoC(temperature)
	{
		return FormatNumber((5/9) * (temperature - 32) , 1);
	}
	
	function MtoFT(length)
	{
		return FormatNumber(length * 3.280839895013123, 0);
	}
	
	function FTtoM(length)
	{
		return FormatNumber(length * 0.3048, 0);
	}
	
	function KMtoMI(distance)
	{
		return FormatNumber(distance * 0.621371192237334, 1);
	}
	
	function MItoKM(distance)
	{
		return FormatNumber(distance * 1.609344, 1);
	}
	
	function MBtoIN(pressure)
	{
		return FormatNumber(pressure * 0.0295300, 2);
	}
	
	function INtoMB(pressure)
	{
		return FormatNumber(pressure * 33.8639, 2);
	}
	
	function MMtoIN(length)
	{
		return FormatNumber(length * 0.0393700787401575, 2);
	}
	
	function INtoMM(length)
	{
		return FormatNumber(length * 25.4, 2);
	}
	
	function KMHtoMPH(speed)
	{
		return FormatNumber(speed * 0.621371192237334, 1);
	}
	
	function MPHtoKMH(speed)
	{
		return FormatNumber(speed * 1.609344, 1);
	}	
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Text manipulation
	//
	/////////////////////////////////////////////////////////////////////////////////////////////	
	
	// Remove multiple, leading or trailing spaces
	function Trim(s) {
		s = s.replace(/(^\s*)|(\s*$)/gi,"");
		s = s.replace(/[ ]{2,}/gi," ");
		s = s.replace(/\n /,"\n");
		return s;
	}
	
	// Remove all spaces
	function RemoveSpaces(s) {
		return s.replace(/(\s|\n)+/g,'');
	}
		
	]]>
	</script>

</component>

<comment>
#includecomponent "../I18N/DateEx.wsc"
#includecomponent "Providers/WUnderground.wsc"
#includecomponent "Providers/TWC.wsc"
#includecomponent "Providers/NOAA.wsc"
</comment>

</package>
