<?xml version="1.0"?>
<package>
<?component error="true" debug="true"?>
<comment>
///////////////////////////////////////////////////////////////////////////////////////////////
//
// 
//
// Copyright (c) 2009, <AUTHOR>
// All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////
// * $LastChangedRevision$
// * $LastChangedDate$
// * $LastChangedBy$
///////////////////////////////////////////////////////////////////////////////////////////////
// 
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//	1. Redistributions of source code must retain the above copyright notice, this list of
//		 conditions and the following disclaimer. 
//	2. Redistributions in binary form must reproduce the above copyright notice, this list
//		 of conditions and the following disclaimer in the documentation and/or other materials
//		 provided with the distribution. 
//	3. The name of the author may not be used to endorse or promote products derived from this
//		 software without specific prior written permission. 
//
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//	OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//	GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
//	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//	POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////////////////////////
</comment>

<component>
	<comment>
		
	</comment>
	<registration description="<DESCRIPTION>"
      			  progid="DXScriptLibrary.<NAME>"
      			  version="1"
      	    	  classid="<CLASSID>"/>  
      	    	  
      	    
	<object id="m_locations" 	progid="Scripting.Dictionary" />  
    <object id="m_alerts" 		progid="Scripting.Dictionary" />  
    <object id="m_forecast" 	progid="Scripting.Dictionary" />  
    <object id="m_cameras" 		progid="Scripting.Dictionary" />  
    
    <object id="m_request" 		progid="Microsoft.XmlDom" /> 
	    
	<public>
		<property name="Name">
			<get />
		</property>
		
		<property name="UseMetricSystem" internalName="m_useMetricSystem" />
		
		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>
		
		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>
		
		<method name="Abort" />
		
		<comment>
			Query can be one of the following:
				- 
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- 
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Query can be one of the following:
				-
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>			
	</public>
	
	<script language="VBScript">
	<![CDATA[
	
	// Constants
	var E_OK 			 = 1;
	var E_ERROR 		 = 0;
	var E_NOTAVAILABLE   = -1;
	var E_NOTIMPLEMENTED = -2;
	var E_PARSEERROR	 = -4;
	
	// Data
	var m_weather   		= null;
	
	// Helper
	var m_helper			= getComponent("WeatherHelper");

	// callbacks
	var m_locationsCallback = null;
	var m_weatherCallback 	= null;
	var m_alertsCallback 	= null;
	var m_forecastCallback  = null;
	var m_camerasCallback   = null;
	var m_errorCallback 	= null;
	
	var m_useMetricSystem = true;
	
	///////////////////////////////
	// Utilities
	///////////////////////////////
	function getComponent(id) {		
		//#ifdef DEBUG
		var LIB_FOLDER = "D:/Sources/Company/src/trunk/src/DesktopX/DXScriptLibrary/Weather/";
		return GetObject("script:" + LIB_FOLDER + "Weather.wsc#" + id);
		//#else
		//return createComponent(id);
		//#endif
	}
	
	function checkParserError() {
		
		if (m_request.parseError.errorCode == 0)
			return true;
		
		if (m_request.text == "")
			m_errorCallback(E_ERROR, "Received empty response!");
		else {	
			var error = "Error parsing response xml: Error " + m_request.parseError.errorCode + ": " + m_request.parseError.reason;
			error += "/ Line " + m_request.parseError.line + " - position " + m_request.parseError.linepos;
			error += "/ Source: " + escape(m_request.parseError.srcText);
		
			m_errorCallback(E_PARSEERROR, error);
		}
		
		return false;
	}
	
		// Try to get a node value and return "" if the node doesn't exists
	function getNodeValue(entry, nodeName)
	{
		 var node = entry.selectNodes(nodeName);
		 
		 if (node.length == 0)
		 	return "";
		 	
		 return node[0].nodeValue;
	}
	
	// Get a query string, using data in priority order
	function getQueryString(locationQuery) {			
		return "";		
	}
	
	///////////////////////////////
	// Properties
	///////////////////////////////
	function get_Name() {
		return getResource("provider_name");
	}
	
	///////////////////////////////
	// Public functions
	///////////////////////////////
	
	// Setup license
	function SetLicense(id, key) {	
		return E_ERROR;
	}
	
	// Set callbacks
	function RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback) {
		m_locationsCallback = locationsCallback;
		m_weatherCallback 	= weatherCallback;
		m_alertsCallback 	= alertsCallback;
		m_forecastCallback  = forecastCallback;
		m_camerasCallback   = camerasCallback;
		m_errorCallback 	= errorCallback;
	}
	
	// Abort current request
	function Abort()
	{
		m_request.abort();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get a list of locations
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetLocations(locationQuery) {
		// Clear any previous results
		m_locations.RemoveAll();
		
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return E_NOTAVAILABLE;
		
		// Reset dom
		m_request.abort();
		
		m_request.onreadystatechange = OnLocationsResponse;
		m_request.async = true;
		m_request.load(getResource("url_locations") + getQueryString(locationQuery));
		
		return E_OK;		
	}
	
	function OnLocationsResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!checkParserError())
			return;
		
		// TODO: Implementation
		
		m_locationsCallback(m_locations);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get the current weather
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetWeather(locationQuery) {
		
		// Reset weather object
		m_weather == null;
		m_weather = getComponent("WeatherInfo");
				
		// Check query for validity
		if (getWeatherQueryString(locationQuery) == "")
			return E_NOTAVAILABLE;
					
		// Reset dom
		m_request.abort();
		
		m_request.onreadystatechange = OnWeatherResponse;
		m_request.async = true;
		m_request.load(getResource("url_weather") + getQueryString(locationQuery));
		
		return E_OK;		
	}
	
	function OnWeatherResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!checkParserError())
			return;
			
		// TODO: Implementation
	    	
		m_weatherCallback(m_weather);	
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////		
	// Get a list of alerts
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetAlerts(locationQuery) {
		return E_NOTIMPLEMENTED;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get the forecast
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetForecast(locationQuery) {		
		// Clear any previous results
		m_forecast.RemoveAll();
		
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return E_NOTAVAILABLE;
		
		// Reset dom
		m_request.abort();
		
		m_request.onreadystatechange = OnForecastResponse;
		m_request.async = true;
		m_request.load(getResource("url_forecast") + getQueryString(locationQuery));
		
		return E_OK;	
	}
	
	function OnForecastResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!checkParserError())
			return;
		
		// TODO: Implementation
		
		m_forecastCallback(m_forecast);		
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get a list of cameras
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetCameras(locationQuery) {		
		return E_NOTIMPLEMENTED;
	}	
		
	]]>
	</script>

</component>
</package>
