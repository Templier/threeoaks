<?xml version="1.0"?>
<package>
<?component error="true" debug="true"?>
<comment>
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Weather Script Component
//
// Copyright (c) 2009, Julien Templier
// All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////
// * $LastChangedRevision$
// * $LastChangedDate$
// * $LastChangedBy$
///////////////////////////////////////////////////////////////////////////////////////////////
// 
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//	1. Redistributions of source code must retain the above copyright notice, this list of
//		 conditions and the following disclaimer. 
//	2. Redistributions in binary form must reproduce the above copyright notice, this list
//		 of conditions and the following disclaimer in the documentation and/or other materials
//		 provided with the distribution. 
//	3. The name of the author may not be used to endorse or promote products derived from this
//		 software without specific prior written permission. 
//
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//	OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//	COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//	GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
//	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//	POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////////////////////////
</comment>

<component>
	<comment>
	Main weather controller
	</comment>
	<registration description="Weather Controller"
      			  progid="DXWeather.Controller"
      			  version="1"
      	    	  classid="{2DB557E8-FA03-40ce-B559-D0BCCFCB48CC}"/>  
      	    	  
	<object id="m_providers" 	progid="Scripting.Dictionary" />  
	<object id="m_providerList" progid="Scripting.Dictionary" /> 
	
	<public>
		<comment>
			Unit system in use
			
			Default is metric system. Set to False to use the English/Imperial unit system.
		</comment>
		<property name="UseMetricSystem">
			<get />
			<put />
		</property>
		
		<comment>
			Setup the license
			  - id: partner id (use "" if N/A)
			  - key: license key
		</comment>
		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>
		
		<comment>
			Returns a dictionnary of available providers (key = provider id, value = provider name)
		</comment>
		<property name="Providers">
			<get />
		</property>
		
		<comment>
			Set the provider to use
			  - id: provider id (key) as retrieved bu GetProviders
			  
			returns: E_OK if the provider was set correctly
				     E_ERROR if the id is not a valid provider id (the current provider will be reset to Nothing)
		</comment>
		<method name="SetProvider">
			<parameter name="id" />
		</method>
	
		<comment>
			Register callbacks for weather controller calls
			  - locationCallback(WeatherLocation[] locations)
			  		called when new location results are available
			  		
			  - weatherCallback(WeatherInfo weather)
			  		called when new weather information is available
			  		
			  - alertsCallback(WeatherAlert[] alerts)
			  		called when new alert information is available
			  		
			  - forecastCallback(WeatherInfo[] forecast)
			  		called when new forecast information is available
			  		
			  - camerasCallback(WeatherCamera[] cameras)
			  		called when new camera results are available
			  		
			  - errorCallback(int errorCode, string errorMessage)
			  		called when an error is raised during an operation						  
		</comment>
		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>
		
		<comment>
			Get a WeatherLocation object to be used in a query
		</comment>
		<method name="GetQueryObject" />

		<comment>
			Get a list of locations.
			  - locationQuery: a WeatherLocation object with the proper fields set
			  
			returns: E_OK if the request was send					 
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get the current weather
			  - locationQuery: a WeatherLocation object with the proper fields set
			 			 		 (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_ERROR if no provider has been set
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get a list of alerts
			  - locationQuery: a WeatherLocation object with the proper fields set
			  					 (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider	
					 E_ERROR if no provider has been set		  
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get the forecast
			  - locationQuery: a WeatherLocation object with the proper fields set
							    (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider
					 E_ERROR if no provider has been set			  
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Get a list of cameras.
			  - locationQuery: a WeatherLocation object with the proper fields set
			  					 (this can be a WeatherLocation object returned by GetLocations)
			  
			returns: E_OK if the request was send
					 E_NOTIMPLEMENTED if this function is not implemented for the current provider
					 E_NOTAVAILABLE if the query type is not supported by the current provider	
					 E_ERROR if no provider has been set		  
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>
	</public>
	
	<script language="VBScript">
	<![CDATA[
	
	Option Explicit
	
	' Constants
	Const E_OK 				= 1
	Const E_ERROR 			= 0
	Const E_NOTAVAILABLE 	= -1
	Const E_NOTIMPLEMENTED  = -2
	Const E_INVALIDLICENSE  = -3
	Const E_PARSEERROR	    = -4
	
	' Callbacks
	Dim m_locationsCallback
	Dim m_weatherCallback
	Dim m_alertsCallback
	Dim m_forecastCallback
	Dim m_camerasCallback
	Dim m_errorCallback
	
	' Current provider
	Dim m_currentProvider
	Dim m_useMetricSystem
	
	' License information
	Dim m_id
	Dim m_key
	
	Init()
	
	'/////////////////////////////////////////////////////////////////////////////////////////
	'// Init
	Sub Init()
	
		Set m_locationsCallback = Nothing
		Set m_weatherCallback 	= Nothing
		Set m_alertsCallback 	= Nothing
		Set m_forecastCallback  = Nothing
		Set m_camerasCallback   = Nothing
		Set m_errorCallback 	= Nothing
		
		Set m_currentProvider = Nothing
		m_useMetricSystem = True
	
		m_id = ""
		m_key = ""
		
		' Provider registration
		RegisterProvider "WUnderground"
	
	End Sub
	
	'/////////////////////////////////////////////////////////////////////////////////////////
	'// Add provider to provider list
	Sub RegisterProvider(id)	
		Dim provider		
		Set provider = CreateComponent(id)
				
		' Add the new provider to the internal provider list and the provider names
		m_providers.Add id, provider
		
		' we use a separate provider list to not expose the providers directly to the user script
		m_providerList.Add id, provider.Name 		
	End Sub		

	'=============================================================================================================================
	'=
	'= Public Methods
	'=
	'=============================================================================================================================	
	
	' Get the unit system in use
	Function get_UseMetricSystem()
		get_UseMetricSystem = m_useMetricSystem
	End Function
	
	Function put_UseMetricSystem(system)
		m_useMetricSystem = CBool(system)
		
		' Update the provider
		m_currentProvider.UseMetricSystem = m_useMetricSystem
	End Function
	
	' Get the list of available providers
	Function get_Providers()
		Set get_Providers = m_providerList
	End Function
	
	' Setup license
	Sub SetLicense(id, key)
		m_id = id
		m_key = key
		
		' Update license information
		If Not (m_currentProvider Is Nothing) Then
			m_currentProvider.SetLicense m_id, m_key
		End If
	End Sub
	
	' Set the provider to use
	Function SetProvider(id)
		If (Not m_providers.Exists(id)) Then
			SetProvider = E_ERROR
			
			' Reset the current provider
			Set m_currentProvider = Nothing
			Exit Function
		End If
		
		Set m_currentProvider = m_providers.Item(id)	
		m_currentProvider.UseMetricSystem = m_useMetricSystem
		m_currentProvider.SetLicense m_id, m_key
		
		' Register callbacks
		' we have to do that and duplicate all the registration code in all providers,
		' since we cannot use events without registering the component
		m_currentProvider.RegisterCallbacks GetRef("OnLocations"), _
											GetRef("OnWeather"), _
											GetRef("OnAlerts"), _
											GetRef("OnForecast"), _
											GetRef("OnCameras"), _
											GetRef("OnError")
		
		SetProvider = E_OK
	End Function
	
	' Set the callbacks
	Sub RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback)
		Set m_locationsCallback = locationsCallback
		Set m_weatherCallback 	= weatherCallback
		Set m_alertsCallback 	= alertsCallback
		Set m_forecastCallback  = forecastCallback
		Set m_camerasCallback   = camerasCallback
		Set m_errorCallback 	= errorCallback		
	End Sub
	
	' Get a WeatherLocation object
	Function GetQueryObject()
		Set GetQueryObject = CreateComponent("WeatherLocation")
	End Function
	
	' Get a WeatherLocation object
	Function GetHelper()
		Set GetHelper = m_helperObject
	End Function
	
	' Get a list of locations
	Function GetLocations(locationQuery)
		If (m_currentProvider Is Nothing) Then
			GetLocations = E_ERROR
			Exit Function
		End If
		
		locationQuery.TrimValues()
		GetLocations = m_currentProvider.GetLocations(locationQuery)
	End Function
	
	' Get the current weather
	Function GetWeather(locationQuery)
		If (m_currentProvider Is Nothing) Then
			GetWeather = E_ERROR
			Exit Function
		End If
	
		locationQuery.TrimValues()
		GetWeather = m_currentProvider.GetWeather(locationQuery)
	End Function
	
	' Get a list of alerts
	Function GetAlerts(locationQuery)
		If (m_currentProvider Is Nothing) Then
			GetAlerts = E_ERROR
			Exit Function
		End If
	
		locationQuery.TrimValues()
		GetAlerts = m_currentProvider.GetAlerts(locationQuery)
	End Function
	
	' Get the forecast
	Function GetForecast(locationQuery)
		If (m_currentProvider Is Nothing) Then
			GetForecast = E_ERROR
			Exit Function
		End If
	
		locationQuery.TrimValues()
		GetForecast = m_currentProvider.GetForecast(locationQuery)
	End Function
	
	' Get a list of cameras
	Function GetCameras(locationQuery)
		If (m_currentProvider Is Nothing) Then
			GetCameras = E_ERROR
			Exit Function
		End If
	
		locationQuery.TrimValues()
		GetCameras = m_currentProvider.GetCameras(locationQuery)
	End Function

	'/////////////////////////////////////////////////////////////////////////////////////////
	'// Callbacks 
	'// (we check here if the callback are defined, so we can use them without problem
	'//  in each provider)
	'/////////////////////////////////////////////////////////////////////////////////////////

	Sub OnLocations(locations)
		If Not (m_locationsCallback Is Nothing) Then			
			m_locationsCallback locations
		End If
	End Sub
	
	Sub OnWeather(weather)
		If Not (m_weatherCallback Is Nothing) Then			
			m_weatherCallback weather
		End If
	End Sub
	
	Sub OnAlerts(alerts)
		If Not (m_alertsCallback Is Nothing) Then			
			m_alertsCallback alerts
		End If
	End Sub
	
	Sub OnForecast(forecast)
		If Not (m_forecastCallback Is Nothing) Then			
			m_forecastCallback forecast
		End If
	End Sub
	
	Sub OnCameras(cameras)
		If Not (m_camerasCallback Is Nothing) Then			
			m_camerasCallback cameras
		End If
	End Sub
	
	Sub OnError(code, value)
		If Not (m_errorCallback Is Nothing) Then
			m_errorCallback code, value
		End If
	End Sub	
		
	]]>
	</script>

</component>

<component id="WeatherInfo">
	<comment>
	Weather information
	</comment>
	<registration description="Weather Information"
      			  progid="DXWeather.Info"
      			  version="1"
      	    	  classid="{30EC2AE5-702A-4b2d-94BB-6CE09B399931}"/>  
      	    	  
      	    
	<public>
		<comment>
			Weather location info (WeatherLocation object)
		</comment>
		<property name="Location" internalname="m_location" />
		
		<property name="WeatherDescription" internalname="m_weatherDescription" />
		<property name="WeatherCode" internalname="m_weatherCode" />
		
		<property name="ObservationDate" internalname="m_observationDate" />
		<property name="ObservationTime" internalname="m_observationTime" />
		
		<property name="Temperature" internalname="m_temperature" />
		<property name="TemperatureFeel" internalname="m_temperatureFeel" />
		
		<property name="Humidity" internalname="m_humidity" />
		<property name="Precipitation" internalname="m_precipitation" />

		<property name="Visibility" internalname="m_visibility" />
		
		<property name="WindDescription" internalname="m_windDescription" />
		<property name="WindDirection" internalname="m_windDirection" />
		<property name="WindDegrees" internalname="m_windDegrees" />
		<property name="WindSpeed" internalname="m_windSpeed" />
		<property name="WindGust" internalname="m_windGust" />

		<property name="WindChillDescription" internalname="m_windChillDescription" />
		<property name="WindChill" internalname="m_windChill" />
		
		<property name="Pressure" internalname="m_pressure" />
				
		<property name="DewPointDescription" internalname="m_dewPointDescription" />
		<property name="DewPoint" internalname="m_dewPoint" />
				
		<property name="HeatDescription" internalname="m_heatDescription" />
		<property name="HeatIndex" internalname="m_heatIndex" />	
		
		<property name="Sunrise" internalname="m_sunrise" />
		<property name="Sunset" internalname="m_sunset" />
		
		<property name="MoonPhaseDescription" internalname="m_moonPhaseDescription" />
		<property name="MoonPhaseCode" internalname="m_moonPhaseCode" />
		<property name="MoonIlluminated" internalname="m_moonIlluminated" />
		<property name="MoonAge" internalname="m_moonAge" />
		
		<property name="DayOfWeek" internalname="m_dayOfWeek" />
		<property name="DayPart" internalname="m_dayPart" />
		<property name="Date" internalname="m_date" />		
		
		<property name="ForecastDescription" internalname="m_forecastDescription" />
		<property name="ForecastCode" internalname="m_forecastCode" />
		<property name="ForecastHigh" internalname="m_forecastHigh" />		
		<property name="ForecastLow" internalname="m_forecastLow" />
		
		<property name="UseMetricSystem" internalName="m_useMetricSystem" />
		
		<method name="ToString" />
		
	</public>
	
	<script language="JScript">
	<![CDATA[
	
		var m_location = createComponent("WeatherLocation");
		var m_useMetricSystem = true;
		
		var m_weatherDescription = "";
		var m_weatherCode = -1;
		
		var m_observationDate = "";
		var m_observationTime = "";
		
		var m_temperature = "";
		var m_temperatureFeel = "";
		
		var m_humidity = -1;
		var m_precipitation = -1;

		var m_visibility = -1;
		
		var m_windDescription = "";
		var m_windDirection = "";
		var m_windDegrees = "";
		var m_windSpeed = -1;
		var m_windGust = -1;

		var m_windChillDescription = "";
		var m_windChill = "";
		
		var m_pressure = -1;
				
		var m_dewPointDescription = "";
		var m_dewPoint = -1;
				
		var m_heatDescription = "";
		var m_heatIndex = -1;
		
		var m_sunrise = "";
		var m_sunset = "";
		
		var m_moonPhaseDescription = "";
		var m_moonPhaseCode = -1;
		var m_moonIlluminated = -1;
		var m_moonAge = -1;
		
		var m_dayOfWeek = -1;
		var m_dayPart = "";
		var m_date = "";
		
		var m_forecastDescription = "";
		var m_forecastCode = -1;
		var m_forecastHigh = "";	
		var m_forecastLow = "";
		
		function ToString()
		{
			var text = "Location: " + m_location.ToString() + "\n";	
			text += "Description: " + m_weatherDescription + " (" + m_weatherCode + ")" + "\n";
			
			return text;
		}
	]]>
	</script>

</component>

<component id="WeatherAlert">
	<comment>
	Weather alert container
	</comment>
	<registration description="Weather alert"
      			  progid="DXWeather.Alert"
      			  version="1"
      	    	  classid="{D4F984BF-A90A-45da-A695-ACBD974B9924}"/>  
      	    	  
      	    
	<public>
		<property name="Type" internalname="m_type" />
		<property name="Description" internalname="m_description" />
		<property name="Date" internalname="m_date" />
		<property name="Expiration" internalname="m_expiration" />
		<property name="Message" internalname="m_message" />
		<property name="Phenomena" internalname="m_phenomena" />
		<property name="Significance" internalname="m_significance" />		
		
		<method name="ToString" />
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	var m_type = "";
	var m_description = "";
	var m_date = "";
	var m_expiration = "";
	var m_message = "";
	var m_phenomena = "";
	var m_significance = "";
	
	function ToString()
	{
		var text = m_description + " (" + m_type + ")" + "\n";		
		text += "Date: " + m_date + "\n";
		text += "Expiration: " + m_expiration + "\n";
		text += "Phenomena: " + m_phenomena + " - Significance: " + m_significance + "\n";
		text += "Message: " + m_message + "\n";
		
		return text;
	}
	
	]]>
	</script>

</component>

<component id="WeatherLocation">
	<comment>
	Weather location/query container
	</comment>
	<registration description="Weather Location"
      			  progid="DXWeather.Location"
      			  version="1"
      	    	  classid="{BC017AA1-3732-4d88-89EC-68823C27ECD3}"/>  
      	    	   
	<public>
		<property name="ID" internalname="m_ID" />		
		<property name="Name" internalname="m_name" />

		<property name="Country" internalname="m_country" />		
		<property name="State" internalname="m_state" />
		<property name="City" internalname="m_city" />
		
		<property name="Timezone" internalname="m_timezone" />
		
		<property name="Latitude" internalname="m_latitude" />
		<property name="Longitude" internalname="m_longitude" />
		<property name="Elevation" internalname="m_elevation" />
		
		<property name="Distance" internalname="m_distance" />	
		
		<property name="AirportCode" internalname="m_airportCode" />
		<property name="ZipCode" internalname="m_zipCode" />		
		<property name="CityCode" internalname="m_cityCode" />
		
		<property name="CustomQueryString" internalname="m_customQueryString" />	
				
		<method name="TrimValues" />
		<method name="ToString" />
	</public>
	
	<script language="JScript">
	<![CDATA[
	    
		var m_ID = "";
	
		var m_country = "";
		var m_state = "";
		var m_city = "";
		
		var m_latitude = "";
		var m_longitude = "";
		
		var m_airportCode = "";
		var m_zipCode = "";
		var m_cityCode = "";
		
		var m_customQueryString = "";
		
		// Results-only data
		var m_name = "";
		var m_timezone = "";
		var m_elevation = "";
		var m_distance = "";

		// trim values used in query
		function TrimValues()
		{
			// Helper
			var m_helper = createComponent("WeatherHelper");
			
			m_ID = m_helper.trim(m_ID);		
				
			m_country = m_helper.trim(m_country);
			m_state = m_helper.trim(m_state);
			m_city = m_helper.trim(m_city);
			
			m_latitude = m_helper.trim(m_latitude);
			m_longitude = m_helper.trim(m_longitude);
			
			m_airportCode = m_helper.trim(m_airportCode);
			m_zipCode = m_helper.trim(m_zipCode);
			m_cityCode = m_helper.trim(m_cityCode);
			
			m_customQueryString = m_helper.trim(m_customQueryString);				
		}
		
		function ToString()
		{
			var text =  m_ID + " - " + m_name  + "\n";
			text += "City: " + m_city + ", " + m_state + " (" + m_country + ")" + "\n";
			text += "Zipcode: " + m_zipCode + "\n";
			text += "Coordinates: " + m_latitude + ", " + m_longitude + "\n";
			text += "Airport Code: " + m_airportCode + " - City Code: " + m_cityCode + "\n";
			text += "Distance: " + m_distance + " - Elevation: " + m_elevation + "\n";

			return text;
		}
	
	]]>
	</script>

</component>

<component id="WeatherHelper">
	<comment>
	Weather Helper functions
	</comment>
	<registration description="Weather Helper"
      			  progid="DXWeather.Helper"
      			  version="1"
      	    	  classid="{4FBA62F1-7479-42e2-84F1-8DE0927C0DAE}"/>  
      	    	  
      	    
	<public>
		
		<comment>
			Convert from C to F (with rounding)
		</comment>
		<method name="CtoF">
			<parameter name="temperature" />
		</method>
		
		<comment>
			Convert from F to C (with rounding)
		</comment>
		<method name="FtoC">
			<parameter name="temperature" />
		</method>
			
		<comment>
			Convert from meter to feet (with rounding)
		</comment>
		<method name="MtoFT">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from feet to meter (with rounding)
		</comment>
		<method name="FTtoM">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from kilometers to miles (with rounding)
		</comment>
		<method name="KMtoMI">
			<parameter name="distance" />
		</method>
		
		<comment>
			Convert from miles to kilometers (with rounding)
		</comment>
		<method name="MItoKM">
			<parameter name="distance" />
		</method>
		
		<comment>
			Convert from millibars to inches of mercury (with rounding)
		</comment>
		<method name="MBtoIN">
			<parameter name="pressure" />
		</method>
		
		<comment>
			Convert from inches of mercury to millibars (with rounding)
		</comment>
		<method name="INtoMB">
			<parameter name="pressure" />
		</method>
		
		<comment>
			Convert from millimeters to inches (with rounding)
		</comment>
		<method name="MMtoIN">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from inches to millimeters (with rounding)
		</comment>
		<method name="INtoMM">
			<parameter name="length" />
		</method>
		
		<comment>
			Convert from km/h to mp/h (with rounding)
		</comment>
		<method name="KMHtoMPH">
			<parameter name="speed" />
		</method>
		
		<comment>
			Convert from mp/h to km/h (with rounding)
		</comment>
		<method name="MPHtoKMH">
			<parameter name="speed" />
		</method>
		
		<comment>
			Remove multiple, leading or trailing spaces
		</comment>
		<method name="trim">
			<parameter name="s" />
		</method>
		
		<comment>
			Remove all spaces
		</comment>
		<method name="removeSpaces">
			<parameter name="s" />
		</method>
		
	</public>
	
	<script language="JScript">
	<![CDATA[
	
	function CtoF(temperature)
	{
		return FormatNumber((9/5) * temperature + 32, 1);
	}
	
	function FtoC(temperature)
	{
		return FormatNumber((5/9) * (temperature - 32) , 1);
	}
	
	function MtoFT(length)
	{
		return FormatNumber(length * 3.280839895013123, 0);
	}
	
	function FTtoM(length)
	{
		return FormatNumber(length * 0.3048, 0);
	}
	
	function KMtoMI(distance)
	{
		return FormatNumber(distance * 0.621371192237334, 1);
	}
	
	function MItoKM(distance)
	{
		return FormatNumber(distance * 1.609344, 1);
	}
	
	function MBtoIN(pressure)
	{
		return FormatNumber(pressure * 0.0295300, 2);
	}
	
	function INtoMB(pressure)
	{
		return FormatNumber(pressure * 33.8639, 2);
	}
	
	function MMtoIN(length)
	{
		return FormatNumber(length * 0.0393700787401575, 2);
	}
	
	function INtoMM(length)
	{
		return FormatNumber(length * 25.4, 2);
	}
	
	function KMHtoMPH(speed)
	{
		return FormatNumber(speed * 0.621371192237334, 1);
	}
	
	function MPHtoKMH(speed)
	{
		return FormatNumber(speed * 1.609344, 1);
	}	
	
	// Remove multiple, leading or trailing spaces
	function trim(s) {
		s = s.replace(/(^\s*)|(\s*$)/gi,"");
		s = s.replace(/[ ]{2,}/gi," ");
		s = s.replace(/\n /,"\n");
		return s;
	}
	
	// Remove all spaces
	function removeSpaces(s) {
		return s.replace(/(\s|\n)+/g,'');
	}
	
	]]>
	</script>

</component>

<component id="WUnderground">
	<comment>
	WUnderground provicer
	</comment>
	<registration description="WUnderground Weather Provider"
      			  progid="DXWeatherProvider.WUnderground"
      			  version="1"
      	    	  classid="{DFF07170-3A66-41e8-9685-67CC07173146}"/>  
      	    	  
    <object id="m_locations" 	progid="Scripting.Dictionary" />  
    <object id="m_alerts" 		progid="Scripting.Dictionary" />  
    <object id="m_forecast" 	progid="Scripting.Dictionary" />  
    <object id="m_cameras" 		progid="Scripting.Dictionary" />  
    
    <object id="m_request" 		progid="Microsoft.XmlDom" /> 
	    
	<public>
		<property name="Name">
			<get />
		</property>
		
		<property name="UseMetricSystem" internalName="m_useMetricSystem" />
		
		<method name="SetLicense">
			<parameter name="id" />
			<parameter name="key" />
		</method>
		
		<method name="RegisterCallbacks">
			<parameter name="locationCallback" />
			<parameter name="weatherCallback" />
			<parameter name="alertsCallback" />
			<parameter name="forecastCallback" />
			<parameter name="camerasCallback" />
			<parameter name="errorCallback" />
		</method>
		
		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon 
		</comment>
		<method name="GetLocations">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- airport code
				- location (ie. station) ID
		</comment>
		<method name="GetWeather">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon 
		</comment>
		<method name="GetAlerts">
			<parameter name="locationQuery" />
		</method>

		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon 
		</comment>
		<method name="GetForecast">
			<parameter name="locationQuery" />
		</method>
		
		<comment>
			Query can be one of the following:
				- zipcode (US or Canadian) 
				- city state; city, state 
				- city 
				- state 
				- country 
				- airport code (3-letter or 4-letter) 
				- lat,lon
		</comment>
		<method name="GetCameras">
			<parameter name="locationQuery" />
		</method>			
	</public>
	
	<resource id="provider_name">Weather Underground</resource>
	<resource id="url_locations">http://api.wunderground.com/auto/wui/geo/GeoLookupXML/index.xml?query=</resource>
	<resource id="url_weather">http://api.wunderground.com/auto/wui/geo/WXCurrentObXML/index.xml?query=</resource>
	<resource id="url_alerts">http://api.wunderground.com/auto/wui/geo/AlertsXML/index.xml?query=</resource>
	<resource id="url_forecast">http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=</resource>
	
	<script language="JScript">
	<![CDATA[
	
	// Constants
	var E_OK 			 = 1;
	var E_ERROR 		 = 0;
	var E_NOTAVAILABLE   = -1;
	var E_NOTIMPLEMENTED = -2;
	var E_PARSEERROR	 = -4;
	
	// Data
	var m_weather   		= null;
	
	// Helper
	var m_helper			= createComponent("WeatherHelper");

	// callbacks
	var m_locationsCallback = null;
	var m_weatherCallback 	= null;
	var m_alertsCallback 	= null;
	var m_forecastCallback  = null;
	var m_camerasCallback   = null;
	var m_errorCallback 	= null;
	
	var m_useMetricSystem = true;
	
	///////////////////////////////
	// Utilities
	///////////////////////////////
	function checkParserError() {
		
		if (m_request.parseError.errorCode == 0)
			return true;
		
		if (m_request.text == "")
			m_errorCallback(E_ERROR, "Received empty response!");
		else {	
			var error = "Error parsing response xml: Error " + m_request.parseError.errorCode + ": " + m_request.parseError.reason;
			error += "/ Line " + m_request.parseError.line + " - position " + m_request.parseError.linepos;
			error += "/ Source: " + escape(m_request.parseError.srcText);
		
			m_errorCallback(E_PARSEERROR, error);
		}
		
		return false;
	}
	
	// Get a query string, using data in priority order
	function getQueryString(locationQuery) {
		if (locationQuery.CustomQueryString != "")
			return locationQuery.CustomQueryString;
		
		if (locationQuery.ZipCode != "")
			return locationQuery.ZipCode;
			
		if (locationQuery.City != "" && locationQuery.State != "")
			return locationQuery.City + ", " + locationQuery.State;
			
		if (locationQuery.City != "")
			return locationQuery.City;
			
		if (locationQuery.State != "")
		 	return locationQuery.State;
		 	
		if (locationQuery.Country != "")
			return locationQuery.Country;
			
		if (locationQuery.AirportCode != "")
			return locationQuery.AirportCode;
			
		if (locationQuery.Latitude != "" && locationQuery.Longitude != "")
			return locationQuery.Latitude + "," + locationQuery.Longitude;
			
		return "";		
	}
	
	// Get a query string for the weather info (airport code / id only)
	function getWeatherQueryString(locationQuery)
	{		
		if (locationQuery.CustomQueryString != "")
			return locationQuery.CustomQueryString;
			
		if (locationQuery.AirportCode != "")
			return locationQuery.AirportCode;
		
		if (locationQuery.ID != "")
			return locationQuery.ID;
		
		return "";
	}
	
	// Parse elevation string and remove unit at the end / convert to metric system if needed
	function parseElevation(elevation)
	{
		// FIXME: remove "ft" at the end of the elevation data and trim the string
		return m_helper.Trim(elevation);
	}
	
	///////////////////////////////
	// Properties
	///////////////////////////////
	function get_Name() {
		return getResource("provider_name");
	}
	
	///////////////////////////////
	// Public functions
	///////////////////////////////
	
	// Setup license
	function SetLicense(id, key) {
		// Not used by this provider: ignore values
	}
	
	// Set callbacks
	function RegisterCallbacks(locationsCallback, weatherCallback, alertsCallback, forecastCallback, camerasCallback, errorCallback) {
		m_locationsCallback = locationsCallback;
		m_weatherCallback 	= weatherCallback;
		m_alertsCallback 	= alertsCallback;
		m_forecastCallback  = forecastCallback;
		m_camerasCallback   = camerasCallback;
		m_errorCallback 	= errorCallback;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get a list of locations
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetLocations(locationQuery) {
		// Clear any previous results
		m_locations.RemoveAll();
		
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return E_NOTAVAILABLE;
		
		// Reset dom
		m_request.abort();
		
		m_request.onreadystatechange = OnLocationsResponse;
		m_request.async = true;
		m_request.load(getResource("url_locations") + getQueryString(locationQuery));
		
		return E_OK;		
	}
	
	function OnLocationsResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!checkParserError())
			return;
			
		// locations index
		var i = 0;		
			
		// Get the weather stations
		var stations = m_request.getElementsByTagName("nearby_weather_stations");
		if (stations.length == 0) {
			m_locationsCallback(m_locations);
			return;
		}
			
		// List airports
		var airportNode = stations[0].getElementsByTagName("airport");
		if (airportNode.length == 0) {
			m_locationsCallback(m_locations);
			return;
		}
		
		var airportEnumerator = new Enumerator(airportNode[0].getElementsByTagName("station"));		
		for (var enumerator = airportEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
		{						
		    var entry = enumerator.item();
		    var airport = createComponent("WeatherLocation");
		    
		    airport.City 		 = entry.selectNodes("city/text()")[0].nodeValue;	
		    airport.State  		 = entry.selectNodes("state/text()")[0].nodeValue;	
		    airport.Country 	 = entry.selectNodes("country/text()")[0].nodeValue;	
		    airport.AirportCode  = entry.selectNodes("icao/text()")[0].nodeValue;	
		    airport.Latitude 	 = entry.selectNodes("lat/text()")[0].nodeValue;	
		    airport.Longitude    = entry.selectNodes("lon/text()")[0].nodeValue;			    
		    
		    m_locations.Add(i, airport);		    
		    i++;
		}
		
		// List personal weather stations
		var personalStations = stations[0].getElementsByTagName("pws");
		if (personalStations.length == 0) {
			m_locationsCallback(m_locations);
			return;
		}
			
		var pwsEnumerator = new Enumerator(personalStations[0].getElementsByTagName("station"));		
		for (var enumerator = pwsEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
		{						
		    var entry = enumerator.item();
		    var pws = createComponent("WeatherLocation");
		    
		    pws.Name	  = entry.selectNodes("neighborhood/text()")[0].nodeValue;	
		    pws.City 	  = entry.selectNodes("city/text()")[0].nodeValue;	
		    pws.State  	  = entry.selectNodes("state/text()")[0].nodeValue;	
		    pws.Country   = entry.selectNodes("country/text()")[0].nodeValue;	
		    pws.ID  	  = entry.selectNodes("id/text()")[0].nodeValue;	
		    
		    if (m_useMetricSystem)
		    	pws.Distance  = entry.selectNodes("distance_km/text()")[0].nodeValue;			    
		    else
		    	pws.Distance  = entry.selectNodes("distance_mi/text()")[0].nodeValue;
		    
		    m_locations.Add(i, pws);		    
		    i++;
		}
		
		m_locationsCallback(m_locations);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get the current weather
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetWeather(locationQuery) {
		
		// Reset weather object
		m_weather == null;
		m_weather = createComponent("WeatherInfo");
				
		// Check query for validity: airport/personal station ID only
		if (getWeatherQueryString(locationQuery) == "")
			return E_NOTAVAILABLE;
					
		// Reset dom
		m_request.abort();
		
		m_request.onreadystatechange = OnWeatherResponse;
		m_request.async = true;
		m_request.load(getResource("url_weather") + getWeatherQueryString(locationQuery));
		
		return E_OK;		
	}
	
	function OnWeatherResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!checkParserError())
			return;
			
		// Parse weather
		var observation = m_request.selectNodes("current_observation");
		if (observation.length == 0) {
			m_weatherCallback(m_weather);	
			return;
		}
		
		// Set unit system
		m_weather.UseMetricSystem = m_useMetricSystem;
		
		///////////////////////////
		//  Parse location data  //
		///////////////////////////
		
		// Airport location
		var location = observation[0].getElementsByTagName("display_location");
		if (location.length != 0) {
			
			m_weather.Location.City  	 = location[0].selectNodes("city/text()")[0].nodeValue;		
			m_weather.Location.State	 = location[0].selectNodes("state_name/text()")[0].nodeValue;		
			m_weather.Location.Country   = location[0].selectNodes("country/text()")[0].nodeValue;		
			m_weather.Location.ZipCode   = location[0].selectNodes("zip/text()")[0].nodeValue;		
			m_weather.Location.Latitude  = location[0].selectNodes("latitude/text()")[0].nodeValue;		
			m_weather.Location.Longitude = location[0].selectNodes("longitude/text()")[0].nodeValue;		
						
			m_weather.Location.Elevation = parseElevation(location[0].selectNodes("elevation/text()")[0].nodeValue);
			
			// Station ID goes into the location airport code
			m_weather.Location.AirportCode = observation[0].selectNodes("station_id/text()")[0].nodeValue;
		} 
		
		// Personal weather station
		location = observation[0].getElementsByTagName("location");
		if (location.length != 0) {
			
			m_weather.Location.Name 	 = location[0].selectNodes("neighborhood/text()")[0].nodeValue;		
			m_weather.Location.City  	 = location[0].selectNodes("city/text()")[0].nodeValue;		
			m_weather.Location.State	 = location[0].selectNodes("state/text()")[0].nodeValue;					
			m_weather.Location.ZipCode   = location[0].selectNodes("zip/text()")[0].nodeValue;		
			m_weather.Location.Latitude  = location[0].selectNodes("latitude/text()")[0].nodeValue;		
			m_weather.Location.Longitude = location[0].selectNodes("longitude/text()")[0].nodeValue;		
						
			m_weather.Location.Elevation = parseElevation(location[0].selectNodes("elevation/text()")[0].nodeValue);			
			
			// Station ID goes into the location ID
			m_weather.Location.ID        =  observation[0].selectNodes("station_id/text()")[0].nodeValue;
		}
		
		//////////////////////////
		//  Parse weather data  //
		//////////////////////////
		
		// Temperature
		
	    
			
		m_weatherCallback(m_weather);	
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////		
	// Get a list of alerts
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetAlerts(locationQuery) {
		// Clear any previous results
		m_alerts.RemoveAll();
		
		// Check query for validity
		if (getQueryString(locationQuery) == "")
			return E_NOTAVAILABLE;
		
		// Reset dom
		m_request.abort();
		
		m_request.onreadystatechange = OnAlertsResponse;
		m_request.async = true;
		m_request.load(getResource("url_alerts") + getQueryString(locationQuery));
		
		return E_OK;		
	}
	
	function OnAlertsResponse() {
		if (m_request.readyState != 4) 
			return;
			
		if (!checkParserError())
			return;
		
		// Parse alert data
		var i = 0;
		var entryEnumerator = new Enumerator(m_request.getElementsByTagName("AlertItem"));		
		for (var enumerator = entryEnumerator; !enumerator.atEnd(); enumerator.moveNext()) 
		{						
		    var entry = enumerator.item();
		    var alert = createComponent("WeatherAlert");
		    
		    alert.Type 		   = entry.selectNodes("type/@src/text()")[0].nodeValue;	
		    alert.Description  = entry.selectNodes("description/@src/text()")[0].nodeValue;	
		    alert.Date 		   = entry.selectNodes("date/@src/text()")[0].nodeValue;	
		    alert.Expiration   = entry.selectNodes("expires/@src/text()")[0].nodeValue;	
		    alert.Message 	   = entry.selectNodes("message/@src/text()")[0].nodeValue;	
		    alert.Phenomena    = entry.selectNodes("phenomena/@src/text()")[0].nodeValue;	
		    alert.Significance = entry.selectNodes("significance/@src/text()")[0].nodeValue;	
		    
		    m_alerts.Add(i, alert);		    
		    i++;
		}
		
		m_alertsCallback(m_alerts);		
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get the forecast
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetForecast(locationQuery) {		
		return E_NOTIMPLEMENTED;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Get a list of cameras
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	function GetCameras(locationQuery) {		
		return E_NOTIMPLEMENTED;
	}	
	
	
	
	
	]]>
	</script>

</component>

</package>

