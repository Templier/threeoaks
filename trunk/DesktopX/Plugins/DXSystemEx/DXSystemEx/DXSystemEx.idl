// IDL source for DXSystemEx

// This file will be processed by the MIDL tool to
// produce the type library and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(9A0F925A-9DFF-495e-986A-680A952A6922),
	dual,
	nonextensible,
	helpstring("IArchiveItem Interface"),
	pointer_default(unique)
]
interface IArchiveItem : IDispatch{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	[propget, id(1), helpstring("Name of the item")] HRESULT Name([out, retval] BSTR* name);	
	[propget, id(2), helpstring("True if the item is a directory, false otherwise")] HRESULT IsDirectory([out, retval] VARIANT_BOOL* isDirectory);
	[propget, id(3), helpstring("Compressed size")] HRESULT CompressedSize([out, retval] long* compressedSize);
};

[
	object,
	uuid(9D1E1F8B-3D11-466e-956A-CC86AC9658D8),
	dual,
	nonextensible,
	helpstring("IMonitorInfo Interface"),
	pointer_default(unique)
]
interface IMonitorInfo : IDispatch{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	[propget, id(1), helpstring("True if this is the primary monitor, False otherwise")] HRESULT IsPrimary([out, retval] VARIANT_BOOL* isPrimary);
	[propget, id(2), helpstring("Left coordinate of monitor")] HRESULT Left([out, retval] int* left);
	[propget, id(3), helpstring("Top coordinate of monitor")] HRESULT Top([out, retval] int* top);
	[propget, id(4), helpstring("Bottom coordinate of monitor")] HRESULT Bottom([out, retval] int* bottom);
	[propget, id(5), helpstring("Right coordinate of monitor")] HRESULT Right([out, retval] int* right);
	[propget, id(6), helpstring("Width of monitor")] HRESULT Width([out, retval] int* width);
	[propget, id(7), helpstring("Height of monitor")] HRESULT Height([out, retval] int* height);
};

[
	object,
	uuid(10B80EC0-FFD2-4c4f-B023-D3E63EE0B542),
	dual,
	helpstring("IArchive Interface"),
	pointer_default(unique)
]
interface IArchive : IDispatch
{
	// TODO return proper error codes instead of boolean

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	[propget, id(1), helpstring("Get the input folder")] HRESULT InputFolder([out, retval] BSTR *inputFolder);
	[propput, id(1), helpstring("Set the input folder")] HRESULT InputFolder([in] BSTR inputFolder);
	[propget, id(2), helpstring("Get the file path")] HRESULT Path([out, retval] BSTR *path);	
	[propget, id(3), helpstring("Get the filename")] HRESULT FileName([out, retval] BSTR *filename);	
	[propget, id(4), helpstring("Get the password")] HRESULT Password([out, retval] BSTR *password);
	[propput, id(4), helpstring("Set the password")] HRESULT Password([in] BSTR password);
	[propget, id(5), helpstring("Get the number of files in the archive")] HRESULT Count([out, retval] long *count);	
	[propget, id(6), helpstring("Get the list of items inside the archive")] HRESULT Items([out, retval] VARIANT* items);	
	[propget, id(7), helpstring("Get the archive compression type")] HRESULT Type([out, retval] int* type);	

	[propget, id(8), helpstring("Get the list of supported extensions")] HRESULT SupportedExtensions([out, retval] VARIANT* exts);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Methods
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	[id(9), helpstring("Create a new archive")] HRESULT Create([in] BSTR filePath, [in] int type, [out, retval] VARIANT_BOOL* status);
	[helpstring("Open an existing archive file")] HRESULT Open([in] BSTR filePath, [out, retval] VARIANT_BOOL* status);
	[helpstring("Add a new file to the archive")] HRESULT AddFile([in] BSTR filename, [out, retval] VARIANT_BOOL* status);	
	[helpstring("Check if a file exists in the archive")] HRESULT ExistsFile([in]BSTR filename, [out, retval] VARIANT_BOOL* status);
	[helpstring("Extract a single file from the archive")] HRESULT ExtractFile([in]BSTR filename, [in] BSTR outputDirectory, [out, retval] VARIANT_BOOL* status);
	[helpstring("Extract the contents of the opened archive to outputDirectory")] HRESULT Extract([in] BSTR outputDirectory, [out, retval] VARIANT_BOOL* status);
	[helpstring("Close the currently opened archive file")] HRESULT Close();

	[helpstring("Return true if the archive format is handled, false otherwise")] HRESULT IsArchive([in] BSTR filePath, [out, retval] VARIANT_BOOL* status);
};

[
	object,
	uuid(1EA1FEB9-07DF-4080-A578-9B5A15294146),
	dual,
	nonextensible,
	helpstring("ISystemEx Interface"),
	pointer_default(unique)
]
interface ISystemEx : IDispatch{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Volume
	[propput, id(1), helpstring("Set Master Volume. Pass volume between 0 and 100. You can get volume change notification with the VistaVolume_OnVolumeEvent event.")] HRESULT Volume([in] int volume);
	[propget, id(1), helpstring("Get Master Volume. Return an number between 0 and 100.")] HRESULT Volume([out, retval] int* volume);
	[propput, id(2), helpstring("Set the muting state of the audio stream. You can get muting state change notification with the VistaVolume_OnMuteEvent event.")] HRESULT Mute([in] VARIANT_BOOL isMuted);
	[propget, id(2), helpstring("Get the muting state of the audio stream. True is the sound is muted, False otherwise.")] HRESULT Mute([out, retval] VARIANT_BOOL* isMuted);
	[propget, id(3), helpstring("Get the peak value. Value is between 0 and 100.")] HRESULT PeakValue([out, retval] int* value);

	// Monitors
	[propget, id(4), helpstring("Get the number of active screens on this machine")] HRESULT NumberOfMonitors([out, retval] int* numberOfMonitors);
	[propget, id(5), helpstring("Get the active screens on this machine")] HRESULT Monitors([out, retval] VARIANT* monitors);

	// Command line and instance
	[propget, id(6), helpstring("Get the full command line")] HRESULT CommandLine([out, retval] BSTR* commandLine);
	[propget, id(7), helpstring("Get an array of command line arguments")] HRESULT CommandLineArgs([out, retval] VARIANT* pArgs);	
	[propget, id(8), helpstring("Check if this instance is the first instance")]HRESULT IsFirstInstance([out, retval] VARIANT_BOOL* isFirstInstance);
	[propget, id(9), helpstring("Get the executable folder")] HRESULT ExecutableFolder([out, retval] BSTR* directory);
	[propget, id(10), helpstring("Get the executable name")] HRESULT ExecutableName([out, retval] BSTR* name);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Methods
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Monitors
	[id(11), helpstring("Get the specific monitor info identified by index")] HRESULT GetMonitor([in] int index, [out, retval] IMonitorInfo** info);

	// Signature
	[helpstring("Get the file signature")] HRESULT GetSignature([in] BSTR path, [in] int type, [out, retval] BSTR* signature);
	[helpstring("Verify the file signature")] HRESULT VerifySignature([in] BSTR path, [in] BSTR signature, [in] int type, [out, retval] VARIANT_BOOL* isValid);

	// Download
	[helpstring("Download a file with progress information")] HRESULT DownloadFile([in] int id, [in] BSTR remoteUrl, [in] BSTR localPath);
	[helpstring("Stop an existing download")] HRESULT StopDownload([in] int id);	

	// Archive
	[helpstring("Get an archive object")] HRESULT GetArchive([out, retval] IArchive** zip);
};

[
	uuid(9F3FB81B-658E-4853-82BA-1A263630CFA5),
	version(1.0),
	helpstring("DXSystemEx 1.0 Type Library")
]
library DXSystemExLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	[
		uuid(6BF576DE-C4CE-4be5-B21A-B84EC58C9D08),
		helpstring("IVolumeEvents Interface")
	]
	dispinterface IVolumeEvents
	{
		properties:
		methods:
		[id(1), helpstring("Fired as a result of a volume change. volume is the master volume (between 0 and 100).")] HRESULT OnVolumeEvent(int volume);
		[id(2), helpstring("Fired as a result of a muting state change. isMuted is True is the volume is muted, False otherwise.")] HRESULT OnMuteEvent(BOOL isMuted);
	};

	importlib("stdole2.tlb");
	[
		uuid(65C94091-C8AE-4423-99A2-CEAE94F91E62),
		helpstring("SystemEx Class")
	]
	coclass SystemEx
	{
		[default] interface ISystemEx;
		[default, source] dispinterface IVolumeEvents;
		interface ISupportErrorInfo;
	};

	importlib("stdole2.tlb");
	[
		uuid(71A818BD-456F-44cd-95B3-5B5338F63E1D),
		helpstring("MonitorInfo Class")
	]
	coclass MonitorInfo
	{
		[default] interface IMonitorInfo;
		interface ISupportErrorInfo;
	};

	importlib("stdole2.tlb");
	[
		uuid(FA95AF31-18C6-4310-94F2-62282D42A683),
		helpstring("ArchiveItem Class")
	]
	coclass ArchiveItem
	{
		[default] interface IArchiveItem;
		interface ISupportErrorInfo;
	};

	importlib("stdole2.tlb");
	[
		uuid(796B8264-38CE-4c63-8657-C1B114CA9DF8),
		helpstring("Archive Class")
	]
	coclass Archive
	{
		[default] interface IArchive;
		interface ISupportErrorInfo;
	};
};
