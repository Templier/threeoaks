// IDL source for DXSystemEx

// This file will be processed by the MIDL tool to
// produce the type library and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(9D1E1F8B-3D11-466e-956A-CC86AC9658D8),
	dual,
	nonextensible,
	helpstring("IMonitorInfo Interface"),
	pointer_default(unique)
]
interface IMonitorInfo : IDispatch{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	[propget, id(1), helpstring("")] HRESULT IsPrimary([out, retval] VARIANT_BOOL* isPrimary);
	[propget, id(2), helpstring("")] HRESULT Left([out, retval] int* left);
	[propget, id(3), helpstring("")] HRESULT Top([out, retval] int* top);
	[propget, id(4), helpstring("")] HRESULT Bottom([out, retval] int* bottom);
	[propget, id(5), helpstring("")] HRESULT Right([out, retval] int* right);
	[propget, id(6), helpstring("")] HRESULT Width([out, retval] int* width);
	[propget, id(7), helpstring("")] HRESULT Height([out, retval] int* height);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Methods
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

};

[
	object,
	uuid(1EA1FEB9-07DF-4080-A578-9B5A15294146),
	dual,
	nonextensible,
	helpstring("ISystemEx Interface"),
	pointer_default(unique)
]
interface ISystemEx : IDispatch{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Properties
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Volume
	[propput, id(1), helpstring("Set Master Volume. Pass volume between 0 and 100. You can get volume change notification with the VistaVolume_OnVolumeEvent event.")] HRESULT Volume([in] int volume);
	[propget, id(1), helpstring("Get Master Volume. Return an number between 0 and 100.")] HRESULT Volume([out, retval] int* volume);
	[propput, id(2), helpstring("Set the muting state of the audio stream. You can get muting state change notification with the VistaVolume_OnMuteEvent event.")] HRESULT Mute([in] BOOL isMuted);
	[propget, id(2), helpstring("Get the muting state of the audio stream. True is the sound is muted, False otherwise.")] HRESULT Mute([out, retval] VARIANT* isMuted);
	[propget, id(3), helpstring("Get the peak value. Value is between 0 and 100.")] HRESULT PeakValue([out, retval] int* value);


	// Monitors
	[propget, id(4), helpstring("Get the number of active screens on this machine")] HRESULT NumberOfMonitors([out, retval] int* numberOfMonitors);
	[propget, id(5), helpstring("Get the active screens on this machine")] HRESULT Monitors([out, retval] VARIANT* monitors);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Methods
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	[id(6), helpstring("")] HRESULT GetMonitor([in] int index, [out, retval] IMonitorInfo** info);

};

[
	uuid(9F3FB81B-658E-4853-82BA-1A263630CFA5),
	version(1.0),
	helpstring("DXSystemEx 1.0 Type Library")
]
library DXSystemExLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	[
		uuid(6BF576DE-C4CE-4be5-B21A-B84EC58C9D08),
		helpstring("IVolumeEvents Interface")
	]
	dispinterface IVolumeEvents
	{
		properties:
		methods:
		[id(1), helpstring("Fired as a result of a volume change. volume is the master volume (between 0 and 100).")] HRESULT OnVolumeEvent(int volume);
		[id(2), helpstring("Fired as a result of a muting state change. isMuted is True is the volume is muted, False otherwise.")] HRESULT OnMuteEvent(BOOL isMuted);
	};

	importlib("stdole2.tlb");
	[
		uuid(65C94091-C8AE-4423-99A2-CEAE94F91E62),
		helpstring("SystemEx Class")
	]
	coclass SystemEx
	{
		[default] interface ISystemEx;
		[default, source] dispinterface IVolumeEvents;
		interface ISupportErrorInfo;
	};

	importlib("stdole2.tlb");
	[
		uuid(71A818BD-456F-44cd-95B3-5B5338F63E1D),
		helpstring("MonitorInfo Class")
	]
	coclass MonitorInfo
	{
		[default] interface IMonitorInfo;
		interface ISupportErrorInfo;
	};
};
