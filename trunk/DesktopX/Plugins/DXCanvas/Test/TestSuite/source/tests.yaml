# Copyright (c) 2008 Philip Taylor - MIT license - see LICENSE.txt

- name: size.attributes.type.set
  desc: Setting width/height DOM attributes
  testing:
    - size.width
    - size.height
  code: |
    _getCanvas().width = 120;
    _getCanvas().height = 60;
    @assert _getCanvas().width === 120;
    @assert _getCanvas().height === 60;
  expected: size 120 60

- name: size.attributes.type.set.negative
  DISABLED: &undefined Seems to be undefined behaviour
  code: |
    _getCanvas().width = -200;
    _getCanvas().height = -100;
    @assert _getCanvas().width === 300;
    @assert _getCanvas().height === 150;
  expected: size 300 150

- name: size.attributes.type.set.nonnumber
  DISABLED: *undefined
  code: |
    _getCanvas().width = 'foo';
    _getCanvas().height = 'foo';
    @assert _getCanvas().width === 300;
    @assert _getCanvas().height === 150;
  expected: size 300 150

- name: size.attributes.type.set.noninteger
  DISABLED: *undefined
  code: |
    _getCanvas().width = 200.9;
    _getCanvas().height = 100.9;
    @assert _getCanvas().width === 200;
    @assert _getCanvas().height === 100;
  expected: size 200 100

- name: size.attributes.type.set.string
  DISABLED: *undefined
  code: |
    _getCanvas().width = '200';
    _getCanvas().height = '100';
    @assert _getCanvas().width === 200;
    @assert _getCanvas().height === 100;
  expected: size 200 100

- name: size.attributes.type.set.badsuffix
  DISABLED: *undefined
  code: |
    _getCanvas().width = '200foo';
    _getCanvas().height = '100foo';
    @assert _getCanvas().width === 200;
    @assert _getCanvas().height === 100;
  expected: size 200 100

- name: size.large
  DISABLED: |
    "User agents may impose implementation-specific limits on otherwise unconstrained
    inputs, e.g. to prevent denial of service attacks, to guard against running out of memory,
    or to work around platform-specific limitations."
  testing:
    - size.width
    - size.height
  notes: Not sure how reasonable this is, but the spec doesn't say there's an upper limit on the size.
  code: |
    var n = 2147483647; // 2^31 - 1, which should be supported by any sensible definition of "long"
    _getCanvas().width = n;
    _getCanvas().height = n;
    @assert _getCanvas().width == n;
    @assert _getCanvas().height == n;
#  expected: size 2147483647 2147483647 # not a good idea to generate the expected image in this case...

- name: initial.colour
  desc: Initial state is transparent black
  testing:
    - initial.colour
  notes: |
    Output should be transparent black (not transparent anything-else), but manual
    verification can only confirm that it's transparent - it's not possible to make
    the actual blackness visible.
  code: |
    @assert pixel 20,20 == 0,0,0,0;
  expected: size 100 50 # transparent

- name: initial.reset.different
  desc: Changing size resets canvas to transparent black
  testing:
    - initial.reset
  background: "#0f0"
  code: |
    ctx.fillStyle = '#f00';
    ctx.fillRect(0, 0, 50, 50);
    @assert pixel 20,20 == 255,0,0,255;
    _getCanvas().width = 50;
    @assert pixel 20,20 == 0,0,0,0;
  expected: size 50 50 # transparent

- name: initial.reset.same
  desc: Setting size (not changing the value) resets canvas to transparent black
  testing:
    - initial.reset
  background: "#0f0"
  code: |
    _getCanvas().width = 100;
    ctx.fillStyle = '#f00';
    ctx.fillRect(0, 0, 50, 50);
    @assert pixel 20,20 == 255,0,0,255;
    _getCanvas().width = 100;
    @assert pixel 20,20 == 0,0,0,0;
  expected: size 100 50 # transparent

- name: initial.reset.path
  desc: Resetting the canvas state resets the current path
  testing:
    - initial.reset
  background: "#0f0"
  code: |
    _getCanvas().width = 100;
    ctx.rect(0, 0, 100, 50);
    _getCanvas().width = 100;
    ctx.fillStyle = '#f00';
    ctx.fill();
    @assert pixel 20,20 == 0,0,0,0;
  expected: size 100 50 # transparent

- name: initial.reset.clip
  desc: Resetting the canvas state resets the current clip region
  testing:
    - initial.reset
  background: "#f00"
  code: |
    _getCanvas().width = 100;
    ctx.rect(0, 0, 1, 1);
    ctx.clip();
    _getCanvas().width = 100;
    ctx.fillStyle = '#0f0';
    ctx.fillRect(0, 0, 100, 50);
    @assert pixel 20,20 == 0,255,0,255;
  expected: green

- name: initial.reset.transform
  desc: Resetting the canvas state resets the current transformation matrix
  testing:
    - initial.reset
  code: |
    _getCanvas().width = 100;
    ctx.scale(0, 0);
    _getCanvas().width = 100;
    ctx.fillStyle = '#0f0';
    ctx.fillRect(0, 0, 100, 50);
    @assert pixel 20,20 == 0,255,0,255;
  expected: green

- name: initial.reset.gradient
  desc: Resetting the canvas state does not invalidate any existing gradients
  code: |
    _getCanvas().width = 50;
    var g = ctx.createLinearGradient(0, 0, 100, 0);
    g.addColorStop(0, '#0f0');
    g.addColorStop(1, '#0f0');
    _getCanvas().width = 100;
    ctx.fillStyle = '#f00';
    ctx.fillRect(0, 0, 100, 50);
    ctx.fillStyle = g;
    ctx.fillRect(0, 0, 100, 50);
    @assert pixel 50,25 == 0,255,0,255;
  expected: green

- name: initial.reset.pattern
  desc: Resetting the canvas state does not invalidate any existing patterns
  code: |
    _getCanvas().width = 50;
    ctx.fillStyle = '#0f0';
    ctx.fillRect(0, 0, 50, 50);
    var p = ctx.createPattern( _getCanvas(), 'repeat-x');
    _getCanvas().width = 100;
    ctx.fillStyle = '#f00';
    ctx.fillRect(0, 0, 100, 50);
    ctx.fillStyle = p;
    ctx.fillRect(0, 0, 100, 50);
    @assert pixel 50,25 == 0,255,0,255;
  expected: green

# See tests2d.yaml for initial.reset.2dstate


- name: context.emptystring
  desc: getContext with empty string returns null
  testing:
    - context.empty
  mozilla: { throws, bug: 401788 }
  code: |
    @assert _getCanvas().getContext("") === null;

- name: context.unrecognised.badname
  desc: getContext with unrecognised context name returns null
  testing:
    - context.unrecognised
  mozilla: { throws, bug: 401788 }
  code: |
    @assert _getCanvas().getContext('This is not an implemented context in any real browser') === null;

- name: context.unrecognised.badsuffix
  desc: Context name '2d' plus a suffix is unrecognised
  testing:
    - context.unrecognised
  mozilla: { throws, bug: 401788 }
  code: |
    @assert _getCanvas().getContext("2d#") === null;

- name: context.unrecognised.nullsuffix
  desc: Context name '2d' plus a '\0' suffix is unrecognised
  testing:
    - context.unrecognised
  mozilla: { throws, bug: 401788 }
  code: |
    @assert _getCanvas().getContext("2d\0") === null;

- name: context.unrecognised.unicode
  desc: Context name which kind of looks like '2d' is unrecognised
  testing:
    - context.unrecognised
  mozilla: { throws, bug: 401788 }
  code: |
    @assert _getCanvas().getContext("2\uFF44") === null; // Fullwidth Latin Small Letter D

- name: context.casesensitive
  desc: Context name '2D' is unrecognised; matching is case sensitive
  testing:
    - context.casesensitive
  mozilla: { throws, bug: 401788 }
  # It's possible that a context called "2D" could be defined, but that would be very
  # confusing so I assume that nobody does that and that any match for "2D" is an
  # incorrect case-insensitive comparison.
  code: |
    @assert _getCanvas().getContext('2D') === null;

- name: context.arguments.missing
  # testing "common conformance requirements for APIs exposed to JavaScript"
  code: |
    @assert throws NOT_SUPPORTED_ERR _getCanvas().getContext(); @moz-todo

- name: context.arguments.extra
  testing:
    - context.extraarguments
  code: |
    @assert _getCanvas().getContext('2d', 'foo') !== null;